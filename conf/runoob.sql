-- MySQL dump 10.13  Distrib 5.7.24, for Linux (x86_64)
--
-- Host: localhost    Database: runoob
-- ------------------------------------------------------
-- Server version	5.7.24-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog_tbl`
--

DROP TABLE IF EXISTS `blog_tbl`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_tbl` (
  `blog_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(160) NOT NULL,
  `author` varchar(30) NOT NULL DEFAULT '佚名',
  `content` mediumtext NOT NULL,
  `origin` varchar(200) DEFAULT NULL,
  `about` varchar(20) NOT NULL DEFAULT 'javascript',
  `commit_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `contributor` varchar(30) NOT NULL DEFAULT 'jason',
  `sub_title` varchar(200) DEFAULT NULL,
  `owner` varchar(50) DEFAULT 'jason',
  `clicked` int(5) DEFAULT '0',
  PRIMARY KEY (`blog_id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tbl`
--

LOCK TABLES `blog_tbl` WRITE;
/*!40000 ALTER TABLE `blog_tbl` DISABLE KEYS */;
INSERT INTO `blog_tbl` VALUES (1,'linux下修改root密码以及找回root密码','bobo_lee','以root身份登陆,执行：\n\n　　# passwd 用户名 (修改密码)\n\n　　# useradd 用户名 (添加用户)\n\n　　具体示例如下：[root@bogon ~]# passwd root\n\n　　Changing password for user root.\n\n　　New UNIX password:\n\n　　BAD PASSWORD: it is based on a dictionary word\n\n　　Retype new UNIX password:\n\n　　passwd: all authentication tokens updated successfully.\n\nlinux下root密码找回方法\n\n　　============================================================================\n\n　　linux的root享有至高无上的权力,一旦root密码忘记或者被盗,是一件非常头痛的事情,那么怎么样才能找回root的密码呢,本人把其总结如下：\n\n　　(一)Linux 系统密码破解\n\n　　1.在grub选项菜单按e进入编辑模式\n\n　　2.编辑kernel那行 /init 1 (或/single)\n\n　　3.按B重启\n\n　　4.进入后执行下列命令\n\n　　root@#passwd root (配置root的密码)\n\n　　Enter new unix password:输入新的密码\n\n　　root@#init 6\n\n　　============================================================================\n\n　　(二)debian linux 系统密码破解\n\n　　1.在grub选项菜单’Debian GNU/Linux,...(recovery mode)’,按e进入编辑模式\n\n　　2.编辑kernel那行面的 ro single 改成 rw single init=/bin/bash,按b执行重启\n\n　　3.进入后执行下列命令\n\n　　root@(none)#mount -a\n\n　　root@(none)#passwd root\n\n　　root@(none)#reboot\n\n　　============================================================================\n\n　　(三)Freebsd 系统密码破解\n\n　　1.开机进入引导菜单\n\n　　2.选择每项(按4)进入单用户模式\n\n　　3.进入之后输入一列命令\n\n　　root@#mount -a\n\n　　root@#fsck -y\n\n　　root@#passwd(修改密码命令)','http://blog.51cto.com/bobolee/1198910','linux','2018-11-09 16:16:30','Jason',NULL,'jason',61),(3,'前端基础进阶（五）：全方位解读this','这波能反杀','我们在学习JavaScript的过程中，由于对一些概念理解得不是很清楚，但是又想要通过一些方式把它记下来，于是就很容易草率的给这些概念定下一些方便自己记忆的有偏差的结论。\n\n危害比较大的是，有的不准确的结论在网上还广为流传。\n\n比如对于this指向的理解中，有这样一种说法：谁调用它，this就指向谁。在我刚开始学习this的时候，我是非常相信这句话的。因为在一些情况下，这样理解也还算说得通。可是我常常会在开发中遇到一些不一样的情况，一个由于this的错误调用，可以让我懵逼一整天。那个时候我也查资料，在群里问大神，可是我仍然搞不清楚“我特么到底错哪里了”。其实只是因为我心中有一个不太准确的结论。\n\n所以，我认为需要有这样一篇文章，来帮助大家全方位的解读this。让大家对this，有一个正确的，全面的认知。\n\n在这之前，我们需要来回顾一下执行上下文。\n\n在前面几篇文章中，我有好几个地方都提到执行上下文的生命周期，为了防止大家没有记住，再次来回顾一下，如下图。\n\n\n执行上下文生命周期\n在执行上下文的创建阶段，会分别生成变量对象，建立作用域链，确定this指向。其中变量对象与作用域链我们都已经仔细总结过了，而这里的关键，就是确定this指向。\n\n首先我们需要得出一个非常重要一定要牢记于心的结论，this的指向，是在函数被调用的时候确定的。也就是执行上下文被创建时确定的。因此，一个函数中的this指向，可以是非常灵活的。比如下面的例子中，同一个函数由于调用方式的不同，this指向了不一样的对象。\n\nvar a = 10;\nvar obj = {\n    a: 20\n}\n\nfunction fn () {\n    console.log(this.a);\n}\n\nfn(); // 10\nfn.call(obj); // 20\n除此之外，在函数执行过程中，this一旦被确定，就不可更改了。\n\nvar a = 10;\nvar obj = {\n    a: 20\n}\n\nfunction fn () {\n    this = obj; // 这句话试图修改this，运行后会报错\n    console.log(this.a);\n}\n\nfn();\n** 一、全局对象中的this **\n\n关于全局对象的this，我之前在总结变量对象的时候提到过，它是一个比较特殊的存在。全局环境中的this，指向它本身。因此，这也相对简单，没有那么多复杂的情况需要考虑。\n\n// 通过this绑定到全局对象\nthis.a2 = 20;\n\n// 通过声明绑定到变量对象，但在全局环境中，变量对象就是它自身\nvar a1 = 10;\n\n// 仅仅只有赋值操作，标识符会隐式绑定到全局对象\na3 = 30;\n\n// 输出结果会全部符合预期\nconsole.log(a1);\nconsole.log(a2);\nconsole.log(a3);\n二、函数中的this\n在总结函数中this指向之前，我想我们有必要通过一些奇怪的例子，来感受一下函数中this的捉摸不定。\n\n// demo01\nvar a = 20;\nfunction fn() {\n    console.log(this.a);\n}\nfn();\n// demo02\nvar a = 20;\nfunction fn() {\n    function foo() {\n        console.log(this.a);\n    }\n    foo();\n}\nfn();\n// demo03\nvar a = 20;\nvar obj = {\n    a: 10,\n    c: this.a + 20,\n    fn: function () {\n        return this.a;\n    }\n}\n\nconsole.log(obj.c);\nconsole.log(obj.fn());\n这几个例子需要花点时间仔细感受一下，如果你暂时没想明白怎么回事，也不用着急，我们一点一点来分析。\n\n分析之前，我们先直接了当抛出结论。\n\n在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。\n\n从结论中我们可以看出，想要准确确定this指向，找到函数的调用者以及区分他是否是独立调用就变得十分关键。\n\n// 为了能够准确判断，我们在函数内部使用严格模式，因为非严格模式会自动指向全局\nfunction fn() {\n    \'use strict\';\n    console.log(this);\n}\n\nfn();  // fn是调用者，独立调用\nwindow.fn();  // fn是调用者，被window所拥有\n在上面的简单例子中，fn()作为独立调用者，按照定义的理解，它内部的this指向就为undefined。而window.fn()则因为fn被window所拥有，内部的this就指向了window对象。\n\n那么掌握了这个规则，现在回过头去看看上面的三个例子，通过添加/去除严格模式，那么你就会发现，原来this已经变得不那么虚无缥缈，已经有迹可循了。\n\n但是我们需要特别注意的是demo03。在demo03中，对象obj中的c属性使用this.a + 20来计算。这里我们需要明确的一点是，单独的{}是不会形成新的作用域的，因此这里的this.a，由于并没有作用域的限制，所以它仍然处于全局作用域之中。所以这里的this其实是指向的window对象。\n\n那么我们修改一下demo03的代码，大家可以思考一下会发生什么变化。\n\n\'use strict\';\nvar a = 20;\nfunction foo () {\n    var a = 1;\n    var obj = {\n        a: 10,\n        c: this.a + 20,\n        fn: function () {\n            return this.a;\n        }\n    }\n    return obj.c;\n\n}\nconsole.log(foo());    // ？\nconsole.log(window.foo());  // ?\n实际开发中，并不推荐这样使用this；\n上面多次提到的严格模式，需要大家认真对待，因为在实际开发中，现在基本已经全部采用严格模式了，而最新的ES6，也是默认支持严格模式。\n再来看一些容易理解错误的例子，加深一下对调用者与是否独立运行的理解。\n\nvar a = 20;\nvar foo = {\n    a: 10,\n    getA: function () {\n        return this.a;\n    }\n}\nconsole.log(foo.getA()); // 10\n\nvar test = foo.getA;\nconsole.log(test());  // 20\nfoo.getA()中，getA是调用者，他不是独立调用，被对象foo所拥有，因此它的this指向了foo。而test()作为调用者，尽管他与foo.getA的引用相同，但是它是独立调用的，因此this指向undefined，在非严格模式，自动转向全局window。\n\n稍微修改一下代码，大家自行理解。\n\nvar a = 20;\nfunction getA() {\n    return this.a;\n}\nvar foo = {\n    a: 10,\n    getA: getA\n}\nconsole.log(foo.getA());  // 10\n灵机一动，再来一个。如下例子。\n\nfunction foo() {\n    console.log(this.a)\n}\n\nfunction active(fn) {\n    fn(); // 真实调用者，为独立调用\n}\n\nvar a = 20;\nvar obj = {\n    a: 10,\n    getA: foo\n}\n\nactive(obj.getA);\n三、使用call，apply显示指定this\nJavaScript内部提供了一种机制，让我们可以自行手动设置this的指向。它们就是call与apply。所有的函数都具有着两个方法。它们除了参数略有不同，其功能完全一样。它们的第一个参数都为this将要指向的对象。\n\n如下例子所示。fn并非属于对象obj的方法，但是通过call，我们将fn内部的this绑定为obj，因此就可以使用this.a访问obj的a属性了。这就是call/apply的用法。\n\nfunction fn() {\n    console.log(this.a);\n}\nvar obj = {\n    a: 20\n}\n\nfn.call(obj);\n而call与applay后面的参数，都是向将要执行的函数传递参数。其中call以一个一个的形式传递，apply以数组的形式传递。这是他们唯一的不同。\n\nfunction fn(num1, num2) {\n    console.log(this.a + num1 + num2);\n}\nvar obj = {\n    a: 20\n}\n\nfn.call(obj, 100, 10); // 130\nfn.apply(obj, [20, 10]); // 50\n因为call/apply的存在，这让JavaScript变得十分灵活。因此就让call/apply拥有了很多有用处的场景。简单总结几点，也欢迎大家补充。\n\n将类数组对象转换为数组\nfunction exam(a, b, c, d, e) {\n\n    // 先看看函数的自带属性 arguments 什么是样子的\n    console.log(arguments);\n\n    // 使用call/apply将arguments转换为数组, 返回结果为数组，arguments自身不会改变\n    var arg = [].slice.call(arguments);\n\n    console.log(arg);\n}\n\nexam(2, 8, 9, 10, 3);\n\n// result:\n// { \'0\': 2, \'1\': 8, \'2\': 9, \'3\': 10, \'4\': 3 }\n// [ 2, 8, 9, 10, 3 ]\n//\n// 也常常使用该方法将DOM中的nodelist转换为数组\n// [].slice.call( document.getElementsByTagName(\'li\') );\n根据自己的需要灵活修改this指向\nvar foo = {\n    name: \'joker\',\n    showName: function() {\n      console.log(this.name);\n    }\n}\nvar bar = {\n    name: \'rose\'\n}\nfoo.showName.call(bar);\n实现继承\n// 定义父级的构造函数\nvar Person = function(name, age) {\n    this.name = name;\n    this.age  = age;\n    this.gender = [\'man\', \'woman\'];\n}\n\n// 定义子类的构造函数\nvar Student = function(name, age, high) {\n\n    // use call\n    Person.call(this, name, age);\n    this.high = high;\n}\nStudent.prototype.message = function() {\n    console.log(\'name:\'+this.name+\', age:\'+this.age+\', high:\'+this.high+\', gender:\'+this.gender[0]+\';\');\n}\n\nnew Student(\'xiaom\', 12, \'150cm\').message();\n\n// result\n// ----------\n// name:xiaom, age:12, high:150cm, gender:man;\n简单给有面向对象基础的朋友解释一下。在Student的构造函数中，借助call方法，将父级的构造函数执行了一次，相当于将Person中的代码，在Sudent中复制了一份，其中的this指向为从Student中new出来的实例对象。call方法保证了this的指向正确，因此就相当于实现了继承。Student的构造函数等同于下。\n\nvar Student = function(name, age, high) {\n    this.name = name;\n    this.age  = age;\n    this.gender = [\'man\', \'woman\'];\n    // Person.call(this, name, age); 这一句话，相当于上面三句话，因此实现了继承\n    this.high = high;\n}\n在向其他执行上下文的传递中，确保this的指向保持不变\n如下面的例子中，我们期待的是getA被obj调用时，this指向obj，但是由于匿名函数的存在导致了this指向的丢失，在这个匿名函数中this指向了全局，因此我们需要想一些办法找回正确的this指向。\n\nvar obj = {\n    a: 20,\n    getA: function() {\n        setTimeout(function() {\n            console.log(this.a)\n        }, 1000)\n    }\n}\n\nobj.getA();\n常规的解决办法很简单，就是使用一个变量，将this的引用保存起来。我们常常会用到这方法，但是我们也要借助上面讲到过的知识，来判断this是否在传递中被修改了，如果没有被修改，就没有必要这样使用了。\n\nvar obj = {\n    a: 20,\n    getA: function() {\n        var self = this;\n        setTimeout(function() {\n            console.log(self.a)\n        }, 1000)\n    }\n}\n另外就是借助闭包与apply方法，封装一个bind方法。\n\nfunction bind(fn, obj) {\n    return function() {\n        return fn.apply(obj, arguments);\n    }\n}\n\nvar obj = {\n    a: 20,\n    getA: function() {\n        setTimeout(bind(function() {\n            console.log(this.a)\n        }, this), 1000)\n    }\n}\n\nobj.getA();\n当然，也可以使用ES5中已经自带的bind方法。它与我上面封装的bind方法是一样的效果。\n\nvar obj = {\n    a: 20,\n    getA: function() {\n        setTimeout(function() {\n            console.log(this.a)\n        }.bind(this), 1000)\n    }\n}\n四、构造函数与原型方法上的this\n在封装对象的时候，我们几乎都会用到this，但是，只有少数人搞明白了在这个过程中的this指向，就算我们理解了原型，也不一定理解了this。所以这一部分，我认为将会为这篇文章最重要最核心的部分。理解了这里，将会对你学习JS面向对象产生巨大的帮助。\n\n结合下面的例子，我在例子抛出几个问题大家思考一下。\n\nfunction Person(name, age) {\n\n    // 这里的this指向了谁?\n    this.name = name;\n    this.age = age;   \n}\n\nPerson.prototype.getName = function() {\n\n    // 这里的this又指向了谁？\n    return this.name;\n}\n\n// 上面的2个this，是同一个吗，他们是否指向了原型对象？\n\nvar p1 = new Person(\'Nick\', 20);\np1.getName();\n我们已经知道，this，是在函数调用过程中确定，因此，搞明白new的过程中到底发生了什么就变得十分重要。\n\n通过new操作符调用构造函数，会经历以下4个阶段。\n\n创建一个新的对象；\n将构造函数的this指向这个新对象；\n指向构造函数的代码，为这个对象添加属性，方法等；\n返回新对象。\n因此，当new操作符调用构造函数时，this其实指向的是这个新创建的对象，最后又将新的对象返回出来，被实例对象p1接收。因此，我们可以说，这个时候，构造函数的this，指向了新的实例对象，p1。\n\n而原型方法上的this就好理解多了，根据上边对函数中this的定义，p1.getName()中的getName为调用者，他被p1所拥有，因此getName中的this，也是指向了p1。\n\n好啦，我所知道的，关于this的一切，已经总结完了，希望大家在阅读之后，能够真正学到东西，然后给我点个赞_。如果你发现有什么错误，请在评论中指出，我会尽快修改。先谢过了。\n\n作者：这波能反杀\n链接：https://www.jianshu.com/p/d647aa6d1ae6\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。','https://www.jianshu.com/p/d647aa6d1ae6','javascript','2018-11-09 16:16:30','Jason',NULL,'jason',28),(4,'Nodejs 进阶：Express 常用中间件 body-parser 实现解析','程序猿小卡','写在前面\nbody-parser是非常常用的一个express中间件，作用是对post请求的请求体进行解析。使用非常简单，以下两行代码已经覆盖了大部分的使用场景。\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n本文从简单的例子出发，探究body-parser的内部实现。至于body-parser如何使用，感兴趣的同学可以参考官方文档。\n\n入门基础\n在正式讲解前，我们先来看一个POST请求的报文，如下所示。\n\nPOST /test HTTP/1.1\nHost: 127.0.0.1:3000\nContent-Type: text/plain; charset=utf8\nContent-Encoding: gzip\n\nchyingp\n其中需要我们注意的有Content-Type、Content-Encoding以及报文主体：\n\nContent-Type：请求报文主体的类型、编码。常见的类型有text/plain、application/json、application/x-www-form-urlencoded。常见的编码有utf8、gbk等。\nContent-Encoding：声明报文主体的压缩格式，常见的取值有gzip、deflate、identity。\n报文主体：这里是个普通的文本字符串chyingp。\nbody-parser主要做了什么\nbody-parser实现的要点如下：\n\n处理不同类型的请求体：比如text、json、urlencoded等，对应的报文主体的格式不同。\n处理不同的编码：比如utf8、gbk等。\n处理不同的压缩类型：比如gzip、deflare等。\n其他边界、异常的处理。\n一、处理不同类型请求体\n为了方便读者测试，以下例子均包含服务端、客户端代码，完整代码可在笔者github上找到。\n\n解析text/plain\n客户端请求的代码如下，采用默认编码，不对请求体进行压缩。请求体类型为text/plain。\n\nvar http = require(\'http\');\n\nvar options = {\n    hostname: \'127.0.0.1\',\n    port: \'3000\',\n    path: \'/test\',\n    method: \'POST\',\n    headers: {\n        \'Content-Type\': \'text/plain\',\n        \'Content-Encoding\': \'identity\'\n    }\n};\n\nvar client = http.request(options, (res) => {\n    res.pipe(process.stdout);\n});\n\nclient.end(\'chyingp\');\n服务端代码如下。text/plain类型处理比较简单，就是buffer的拼接。\n\nvar http = require(\'http\');\n\nvar parsePostBody = function (req, done) {\n    var arr = [];\n    var chunks;\n\n    req.on(\'data\', buff => {\n        arr.push(buff);\n    });\n\n    req.on(\'end\', () => {\n        chunks = Buffer.concat(arr);\n        done(chunks);\n    });\n};\n\nvar server = http.createServer(function (req, res) {\n    parsePostBody(req, (chunks) => {\n        var body = chunks.toString();\n        res.end(`Your nick is ${body}`)\n    });\n});\n\nserver.listen(3000);\n解析application/json\n客户端代码如下，把Content-Type换成application/json。\n\nvar http = require(\'http\');\nvar querystring = require(\'querystring\');\n\nvar options = {\n    hostname: \'127.0.0.1\',\n    port: \'3000\',\n    path: \'/test\',\n    method: \'POST\',\n    headers: {\n        \'Content-Type\': \'application/json\',\n        \'Content-Encoding\': \'identity\'\n    }\n};\n\nvar jsonBody = {\n    nick: \'chyingp\'\n};\n\nvar client = http.request(options, (res) => {\n    res.pipe(process.stdout);\n});\n\nclient.end( JSON.stringify(jsonBody) );\n服务端代码如下，相比text/plain，只是多了个JSON.parse()的过程。\n\nvar http = require(\'http\');\n\nvar parsePostBody = function (req, done) {\n    var length = req.headers[\'content-length\'] - 0;\n    var arr = [];\n    var chunks;\n\n    req.on(\'data\', buff => {\n        arr.push(buff);\n    });\n\n    req.on(\'end\', () => {\n        chunks = Buffer.concat(arr);\n        done(chunks);\n    });\n};\n\nvar server = http.createServer(function (req, res) {\n    parsePostBody(req, (chunks) => {\n        var json = JSON.parse( chunks.toString() );    // 关键代码    \n        res.end(`Your nick is ${json.nick}`)\n    });\n});\n\nserver.listen(3000);\n解析application/x-www-form-urlencoded\n客户端代码如下，这里通过querystring对请求体进行格式化，得到类似nick=chyingp的字符串。\n\nvar http = require(\'http\');\nvar querystring = require(\'querystring\');\n\nvar options = {\n    hostname: \'127.0.0.1\',\n    port: \'3000\',\n    path: \'/test\',\n    method: \'POST\',\n    headers: {\n        \'Content-Type\': \'form/x-www-form-urlencoded\',\n        \'Content-Encoding\': \'identity\'\n    }\n};\n\nvar postBody = { nick: \'chyingp\' };\n\nvar client = http.request(options, (res) => {\n    res.pipe(process.stdout);\n});\n\nclient.end( querystring.stringify(postBody) );\n服务端代码如下，同样跟text/plain的解析差不多，就多了个querystring.parse()的调用。\n\nvar http = require(\'http\');\nvar querystring = require(\'querystring\');\n\nvar parsePostBody = function (req, done) {\n    var length = req.headers[\'content-length\'] - 0;\n    var arr = [];\n    var chunks;\n\n    req.on(\'data\', buff => {\n        arr.push(buff);\n    });\n\n    req.on(\'end\', () => {\n        chunks = Buffer.concat(arr);\n        done(chunks);\n    });\n};\n\nvar server = http.createServer(function (req, res) {\n    parsePostBody(req, (chunks) => {\n        var body = querystring.parse( chunks.toString() );  // 关键代码\n        res.end(`Your nick is ${body.nick}`)\n    });\n});\n\nserver.listen(3000);\n二、处理不同编码\n很多时候，来自客户端的请求，采用的不一定是默认的utf8编码，这个时候，就需要对请求体进行解码处理。\n\n客户端请求如下，有两个要点。\n\n编码声明：在Content-Type最后加上;charset=gbk\n请求体编码：这里借助了iconv-lite，对请求体进行编码iconv.encode(\'程序猿小卡\', encoding)\nvar http = require(\'http\');\nvar iconv = require(\'iconv-lite\');\n\nvar encoding = \'gbk\';  // 请求编码\n\nvar options = {\n    hostname: \'127.0.0.1\',\n    port: \'3000\',\n    path: \'/test\',\n    method: \'POST\',\n    headers: {\n        \'Content-Type\': \'text/plain; charset=\' + encoding,\n        \'Content-Encoding\': \'identity\',        \n    }\n};\n\n// 备注：nodejs本身不支持gbk编码，所以请求发送前，需要先进行编码\nvar buff = iconv.encode(\'程序猿小卡\', encoding);\n\nvar client = http.request(options, (res) => {\n    res.pipe(process.stdout);\n});\n\nclient.end(buff, encoding);\n服务端代码如下，这里多了两个步骤：编码判断、解码操作。首先通过Content-Type获取编码类型gbk，然后通过iconv-lite进行反向解码操作。\n\nvar http = require(\'http\');\nvar contentType = require(\'content-type\');\nvar iconv = require(\'iconv-lite\');\n\nvar parsePostBody = function (req, done) {\n    var obj = contentType.parse(req.headers[\'content-type\']);\n    var charset = obj.parameters.charset;  // 编码判断：这里获取到的值是 \'gbk\'\n\n    var arr = [];\n    var chunks;\n\n    req.on(\'data\', buff => {\n        arr.push(buff);\n    });\n\n    req.on(\'end\', () => {\n        chunks = Buffer.concat(arr);\n        var body = iconv.decode(chunks, charset);  // 解码操作\n        done(body);\n    });\n};\n\nvar server = http.createServer(function (req, res) {\n    parsePostBody(req, (body) => {\n        res.end(`Your nick is ${body}`)\n    });\n});\n\nserver.listen(3000);\n三、处理不同压缩类型\n这里举个gzip压缩的例子。客户端代码如下，要点如下：\n\n压缩类型声明：Content-Encoding赋值为gzip。\n请求体压缩：通过zlib模块对请求体进行gzip压缩。\nvar http = require(\'http\');\nvar zlib = require(\'zlib\');\n\nvar options = {\n    hostname: \'127.0.0.1\',\n    port: \'3000\',\n    path: \'/test\',\n    method: \'POST\',\n    headers: {\n        \'Content-Type\': \'text/plain\',\n        \'Content-Encoding\': \'gzip\'\n    }\n};\n\nvar client = http.request(options, (res) => {\n    res.pipe(process.stdout);\n});\n\n// 注意：将 Content-Encoding 设置为 gzip 的同时，发送给服务端的数据也应该先进行gzip\nvar buff = zlib.gzipSync(\'chyingp\');\n\nclient.end(buff);\n服务端代码如下，这里通过zlib模块，对请求体进行了解压缩操作（guzip）。\n\nvar http = require(\'http\');\nvar zlib = require(\'zlib\');\n\nvar parsePostBody = function (req, done) {\n    var length = req.headers[\'content-length\'] - 0;\n    var contentEncoding = req.headers[\'content-encoding\'];\n    var stream = req;\n\n    // 关键代码如下\n    if(contentEncoding === \'gzip\') {\n        stream = zlib.createGunzip();\n        req.pipe(stream);\n    }\n\n    var arr = [];\n    var chunks;\n\n    stream.on(\'data\', buff => {\n        arr.push(buff);\n    });\n\n    stream.on(\'end\', () => {\n        chunks = Buffer.concat(arr);        \n        done(chunks);\n    });\n\n    stream.on(\'error\', error => console.error(error.message));\n};\n\nvar server = http.createServer(function (req, res) {\n    parsePostBody(req, (chunks) => {\n        var body = chunks.toString();\n        res.end(`Your nick is ${body}`)\n    });\n});\n\nserver.listen(3000);\n写在后面\nbody-parser的核心实现并不复杂，翻看源码后你会发现，更多的代码是在处理异常跟边界。\n\n另外，对于POST请求，还有一个非常常见的Content-Type是multipart/form-data，这个的处理相对复杂些，body-parser不打算对其进行支持。篇幅有限，后续章节再继续展开。\n\n欢迎交流，如有错漏请指出。','https://www.cnblogs.com/chyingp/p/nodejs-learning-express-body-parser.html','node','2018-11-09 17:38:33','Jason',NULL,'jason',20),(5,'Why the NSA Called Me After Midnight','Peter Avritch','Please listen carefully and don’t hang up. Those were the first words this unknown male caller said to me when my brother handed me the phone.\n\nIt was the July 4th weekend, 2000, give or take a day, and Mr. X knew to say that first because he was calling me after midnight at my brother’s house in Connecticut. This was beyond creepy because I lived in California and nobody knew I was in Connecticut except for my immediate family, who were all there with me in the house. I had only arrived the day before as I do most years about this time for our annual family picnic.\n\nWhy was this guy calling me?\n\nIt was a matter of national security.\nThe caller apologized for waking us up and said his name was Dave. He asked me to get a pen and paper because he was about to give me some important instructions that would allow me to confirm his identity. Then he dropped the bomb and said “it was a matter of national security.”\n\nBy now some of the other people in the house had started to gather around where I was standing in the kitchen by the wall-mounted phone. What the hell was going on? I signaled to my brother to bring me a pen — stat.\n\nI was still trying to process what was going on, and strangely, I didn’t even have the frame of mind to ask Dave how he got this number. He sounded serious and spoke with an air of authority; I guess I was already convinced he was on the level.\n\nOkay, I’m ready to write.\n\nDave told me he was with the NSA in Bethesda — the National Security Agency. He couldn’t say anything more until I called him back. This is why I needed the pen. He was about to give me a series of steps to follow to call him back in a way that proved his identity and cemented the gravity of the situation.\n\nCall Me Back\nDave instructed me to hang up the phone and dial 411 (information) and ask the operator for the main number to the naval base in Bethesda, MD. I was to call that number and then work my way through a series of other base operators, asking each in turn to connect me to the next one in the chain. He gave me the exact words to say at each hop since I’d be asking to be put through to a secure facility.\n\nThe adrenaline had kicked in and I was wide awake.\nTo put me at ease, he said he’d call back in ten minutes if he didn’t hear from me — just in case I messed up. But I didn’t mess up.\n\nA few minutes later I was back on the phone with Dave. Whoa — the NSA. This was actually real. The adrenaline had kicked in and I was wide awake.\n\nWe Need Your Help\nDave proceeded to tell me that they were in possession of a laptop containing files that had been encrypted using my SafeHouse privacy software. They had a national security situation that required immediate access to those files and they needed my help; or more specifically, for me to help them gain access possibly faster than they could do all on their own. Time was of the essence; hence, the midnight call.\n\nBad things were about to happen if the NSA couldn’t get into those files.\nSafeHouse was (and still is) a popular Windows utility I developed to encrypt private files which was distributed as Internet shareware. The free shareware edition purposely featured weak encryption to comply with State Department export controls on munitions as well as to encourage users needing serious privacy to upgrade to the stronger paid edition. My customers ranged from home users to big Wall Street institutions.\n\nBad things were about to happen if the NSA couldn’t get into those files. Maybe people would die, or at least Dave instilled that impression on me as he politely asked if I would be willing to give him my source code; all the while, apologizing for not being able to tell me anything more about the situation.\n\nI mention Dave was polite in asking for my code because it’s something that stood out and struck me as unusually odd — he was way too nice. He seemed predisposed or prepared for me to say no. And if it had been anyone else at any other time, he would have been right, but I could tell something big was up and there simply wasn’t time to debate the merits of handing over my source code to the NSA.\n\nOf course, Dave asked right off if there was any chance there might be a back door to the encryption, as that would save a lot of time. But no. SafeHouse was designed to the highest standards and best practices using strong 256-bit industry-standard ciphers.\n\nI’ll give you the source. Absolutely. Anything you need. No problem. But there actually was a tiny problem — I didn’t have it with me. I was on vacation. So I called and woke up Ron in Portland, OR. By then it was about 1am on the west coast. Ron was a programmer on my team and I knew he had a copy of the source at home.\n\nZipped. Emailed. Done.\n\nI tried to probe — so, can you guys actually break 256-bit encryption? Dave was mum. Encryption insiders had always speculated about that; I figured it was worth a try. I didn’t really expect him to answer.\n\nWhen did this laptop dude buy SafeHouse? What version did he have? The more I know, the more I can point you guys in the right direction.\n\nAnd that’s when Dave let on that laptop dude had the shareware version. What — seriously? That changes everything. The shareware version only supported cheap 40-bit encryption — totally breakable within just a few days by most determined hackers; and likely, I’d assume, in quite a bit less time than that by the secret code breakers working in windowless rooms deep inside the NSA.\n\nI probed again, this time about their capability at 40 bits; maybe that reduced level wasn’t such a State secret. But again, Dave was mum.\n\nDumb-Ass Criminals\nBut seriously, this laptop idiot was planning to blow up a building, or something equally as bad, but wasn’t smart enough or flush enough to pop for the $39.99 to step up to the maximum-strength encryption?\n\nThis time Dave answered — “surprisingly, it happens all the time. They call them dumb criminals for a reason. Unbelievable, but true.”\n\nI continued to work with Dave and his team over the next day or so. I answered all of their questions and they answered none of mine — naturally. But they were always polite in these one-sided conversations that fueled an insane curiosity that I knew would never be satisfied.\n\nThe Gift\nA few days later I was back home in California and an unmarked box showed up at my office addressed to me. Inside, wrapped in white tissue paper, was a blue NSA coffee cup with a hand-written note on plain white copy paper that simply said “Thank you. Dave.”\n\nLater that day I got a call from Dave. He still couldn’t give me any details because it was all top secret, but he did tell me that everything “worked out” and they were grateful for my help.\n\nOnce more I tried to probe and asked if “worked out” meant they cracked the code; but of course, again, he wouldn’t say. Always so silent. He must be a hoot at parties. Is Dave even his real name?\n\nAs I thanked him for the gift, I couldn’t help not bust his chops about the covert note that he tucked inside the box. He just laughed and said “that’s my official NSA stationery.”\n\nI’ve had that top secret coffee cup for 18 years now. It’s the same one pictured at the top of this article. I need my coffee every morning, but I’ve never used this cup. It’s too special. I’m afraid I’d break it if I started using it on a regular basis, so it stays up on a shelf in my living room alongside some of my other treasured mementos.\n\nFor all I know, they sell those cups in the gift shop.\nI’ve never been to the NSA, and for all I know, they sell those cups in the gift shop. But to me it doesn’t matter. This cup is a reminder of something bad that never happened, and I played a small role in that.\n\nBut there’s still one thing that continues to nag me after all these years — how the hell did Dave track me down 3,000 miles away from home after midnight on that hot summer’s eve in Bristol, Connecticut?','https://medium.com/datadriveninvestor/why-the-nsa-called-me-after-midnight-and-requested-my-source-code-f7076c59ab3d','others','2018-11-12 09:34:42','Jason',NULL,'jason',10),(7,'前端基础进阶（十五）：详解 ES6 Modules','这波能反杀','对于新人朋友来说，想要自己去搞定一个ES6开发环境并不是一件容易的事情，因为构建工具的学习本身又是一个非常大的方向，我们需要花费不少的时间才能掌握它。\n\n好在慢慢的开始有大神提供了一些非常简单易懂，学习成本非常低的解决方案来帮助大家学习。create-react-app就是这些解决方案中，个人认为最简单易懂的一种方式。\n\n所以在学习ES6 modules之前，先跟大家介绍一下create-react-app的安装与使用。\n\n尽管create-react-app的目的是用于开发react程序，但是我们仅仅只用来学习ES6是再合适不过了。当然你也可以借助vue-cli来学习，同样十分简单。\n\n1、确保自己的本地环境已经安装了node与npm\n通常安装的方式就是去node的官方网站下载安装，在安装node的时候，npm也会一起被安装。\n\n下载地址： http://nodejs.cn/download/\n\n2、安装一个好用的命令行工具\n在windows环境下，系统默认的cmd非常难用，所以我个人比较推荐大家使用git.bash 或者 cmder。\n\ngit 下载地址： https://git-scm.com/downloads\n在git安装目录下会有一个bash工具，找到安装目录直接使用即可。\n\ncmder下载地址： http://cmder.net/\n\n在mac上就方便很多了，你可以直接使用系统自带的terminal工具，就非常好用。但是一般我推荐大家使用iterm2，并安装oh my zsh插件。具体的配置大家可以自己去折腾，网上的教程应该足够帮助你搞定这一切了。\n\niterm2 下载地址 http://www.iterm2.com/downloads.html\noh my zsh 主题选择 https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes\n\n另外还强烈推荐一款超高颜值的终端工具 hyperTerm。\n\n这款工具的特色就是颜值高，第一感觉就是惊艳，大家不妨一试。\n\n\nhyperTerm 下载地址 https://hyper.is/\n3、安装create-react-app\n在命令行工具中使用查看版本的方式确保node与npm都安装好之后，我们就可以安装create-react-app了。\n\n> node -v\n// 输出node版本号\n\n> npm -v\n// 输出npm版本号\n使用npm全局安装create-react-app\n\n> npm install create-react-app -g\n然后我们就可以使用create-react-app来创建我们的第一个项目。\n\n找到一个你要存放项目的根目录，假设叫做develop，运行以下指令。\n\n> create-react-app es6app\ncreate-react-app会自动帮助我们在develop目录下创建一个叫做es6app的文件夹，这就是我们新创建的项目。\n\n当项目创建完成之后，在命令行工具中，我们会看到如图所示的提示。这些提示告诉了我们如何运行项目npm start ，如何打包项目npm run build等，这里我就不再赘述。\n\n\n项目创建完毕之后，进入该文件夹。\n\n> cd es6app\n\n// 查看文件夹里的内容\n> ls\n我们会发现里面有一个叫做package.json的文件，这个文件里包含了项目所需要的所有依赖。当我们第一次运行项目之前，还需要安装该文件里的依赖包。\n\n> npm install\n安装完毕之后，我们就可以启动该项目了。\n\n> npm start\n项目启动之后\n一般来说，启动之后会自动在浏览器中打开。\n\n项目首次启动的页面\ncreate-react-app已经自动帮助我们实现了热更新，因此当我们修改代码时，浏览器会自动更新。当然，如果我们仅仅只是修改页面样式时，热更新将会非常方便，但是如果你正在进行单页面的组件开发，可能热更新能够提供的帮助非常有限。\n\n4、认识项目\n只要我们按照构建工具的规则进行开发，那么构建工具会自动帮助我们将代码进行整合，因此在该项目中开发时，我们并不需要自己来使用script或者link标签来引入js与css，所以认识create-react-app的规则就变得很重要。\n\n初次创建的项目下，会有3个文件夹。\n\nnode_modules\n项目依赖包存放位置。当我们运行npm install安装package.json中的依赖包时，该文件夹会自动创建，所有的依赖包会安装到该文件夹里。\n\npublic\n主要的作用是html入口文件的存放。当然我们也可以存放其他公用的静态资源，如图片，css等。其中的index.html就是我们项目的入口html文件\n\nsrc\n组件的存放目录。在create-react-app创建的项目中，每一个单独的文件都可以被看成一个单独的模块，单独的image，单独的css，单独js等，而所有的组件都存放于src目录中，其中index.js则是js的入口文件。虽然我们并没有在index.html中使用script标签引入他，但是他的作用就和此一样。\n\n当然，如果我们要进一步进行react的学习，那么肯定需要了解多一点的规则，但是在学习react之前，我们还是先把ES6 modules的知识搞定在说吧，所以，接下来你要做的事情就是，删掉src目录里的除了index.js之外的所有文件，并清空index.js，我们从0开始学习ES6 modules。\n\n为了确保程序仍然能够正常运行，我们在index.js中随便写点代码测试一下\n\nconst app = document.querySelector(\'#root\')\napp.innerHTML = \'啊，全部被清空啦，准备工作终于做完了，可以开始学习ES6啦\'\n一切正常，程序变得普通了，我们更容易理解\n那么我们就可以在这个环境下学习ES6的所有知识了，当然也包括ES6 modules。\n\nES6 modules\n1. 引入模块\n首先在src目录下创建一个test.js，在test.js中我们随便干点什么简单的事情即可。\n\n// src/test.js\nconsole.log(\'your first module\');\n在index.js中通过import引入test.js，这是我们要学会的第一个语法\n\n// src/index.js\nimport test from \'./test\'\n\nconsole.log(test);\nimport表示引入一个模块，\ntest 我们暂时理解为引入模块的名字，\nfrom表示从哪里引入\n./test为./test.js的简写，表示将要引入模块的路径\n结果是test中的代码执行，index.js中模块test为一个空对象\n引入这个动作执行时，test.js中的代码也执行了。由于在test.js中并没有对外暴露任何接口，因此index.js中的test为一个空对象，那么对外暴露接口的方式，则是我们要学习的第二个语法。\n\n2. 对外提供接口\nES6 modules使用export关键字对外提供接口，在我们刚才创建的test.js中，我们添加如下代码\n\n// test.js\nconst num = 20;\nconst arr = [1, 2, 3, 4];\nconst obj = {\n    a: 0,\n    b: function() {}\n}\nconst foo = () => {\n    const a = 0;\n    const b = 20;\n    return a + b;\n}\n\nexport default {\n    num,\n    arr,\n    obj,\n    foo\n}\n运行结果\n在test.js中，我们使用export default对包暴露了一个对象。他的意思就是当我们使用import test from \'./test\'时，这个test对象就默认等于export default暴露的对象。\n\n我们还可以在test.js中，仅仅通过export暴露几个方法与属性，我们来看看index.js中test会变成什么样子。\n\n// src/test.js\nexport const bar = () => {}\nexport const zcar = 12345;\n保存运行后，我们发现，index.js中的test对象并没有变化，因为它仅仅等于export default抛出的对象，因此，为了获得模块test.js暴露的所有接口，我们得通过如下的方式。\n\n// src/index.js\nimport * as test from \'./test\';\n其中的 * 表示所有，这是比较常用的通配符，as表示别名，* as test的意思是将test.js暴露的所有接口组成的对象，命名为test。那么我们在index.js中log出test，结果就如下。\n\n看到结果，我们就很容易清楚的知道export与export default的区别与作用了，并且如何使用他们就变得很简单了\n如果大家还记得前面一篇文章里，我所讲的ES6解析结构的语法，那么对于如下的用法相信就不难理解。\n\n// src/index.js\nimport test, { bar, zcar } from \'./test\';\n\nconsole.log(test);\nconsole.log(\'bar:\', bar);\nconsole.log(\'zcar:\', zcar);\ntest，仍然表示为export default暴露的对象，而 { bar, zcar }则表示利用解析结构的语法，从整个返回对象中去取得对应的接口。输出结果也就很清晰了。\n\nresult\n这种方式还是比较常见，比如我们在使用react时，常常这样使用：\n\nimport React, { Component } from \'react\'\n它其实暗示了React的封装方式，也暗示了我们应该如何去封装我们的模块。\n\n这里我们能够直接引入react的原因，是因为我们将它安装到了文件夹node_modules中，该文件夹中安装的所有模块都可以这样直接引用。例如我们安装一个jquery。\n\n// 安装jquery\n> npm install jquery\n然后在其他模块中就可以直接引入\n\nimport $ from \'jquery\'\n这样，我们可以和往常一样使用jquery。\n通过这样方式，我们还可以扩展更多的库，这就使得我们这个开发环境不仅仅能够用于react的开发，怎么用，完全取决与你自己。\n\nOK，ES6 模块的基础语法大概就这些吧，他告诉了我们在ES6中，一个模块应该如何对外暴露接口与如何引入其他模块暴露的接口，这个知识点在实际开发中非常常用，因此虽然简单，但是不得不掌握，这也是大家进一步学习react或者vue的基础，主要的难点大概在于本地开发环境的折腾，如果你是初次折腾这些，可能会遇到一些小问题，所以一定要有一点耐心。\n\n','https://www.jianshu.com/p/b7db6224a4aa','javascript','2018-11-12 15:08:22','Jason',NULL,'jason',7),(8,'A Software Engineering survival guide','Valeri Alexiev','The first few years of my career were a time of intense learning.\n\nI encountered the realities of being a software engineer and had to acquire many skills that I didn’t know I needed. Looking back, it would sure have been nice to know the things I know now.\n\nSo, I wrote this guide to help others based on the experiences of developers I mentored in their first few years as professionals, and those of myself and some of my colleagues.\n\nI will cover:\n\nHow to make the best out of interviews,\nHow to survive (and thrive) in your work as a software engineer,\nAnd what resources to look into when considering continuous improvement.\nInterviews\nAs you start your career in Software Engineering, you’ll have to face one indisputable fact. Interviews suck.\n\nThey can be awful for everybody involved. Having been both an interviewer and an interviewee, I can attest that interviews are a big time sink, extremely stressful and a really bad indicator of future job performance. Nevertheless, they are a necessary evil that you and your résumé better be prepared for.\n\nPreparing for Battle\nIf you’re considering a career in Software Engineering, make sure to learn some of the most commonly asked programming interview questions, such as ‘FizzBuzz’:\n\n“Write a program that prints the numbers from 1 to 100. But for multiples of three print ‘Fizz’ instead of the number and for the multiples of five print ‘Buzz’. For numbers which are multiples of both three and five print ‘FizzBuzz’.”\n(Coding Horror)\nSounds simple enough, right?\n\nWell, the vast majority of interviewees fail this simple test, let alone its more complex variants.\n\nI’ve personally seen many candidates for senior positions fail this test while having full internet access. So make sure that if a programming language is listed on your résumé, you know how to do at least FizzBuzz in it. Otherwise, you’re just wasting everybody’s time, including yours.\n\nOf course, you’ll need to know more than just FizzBuzz to survive your interviews. You also need to make sure that you know:\n\nBasic data structures and algorithms: such as linked lists, arrays, trees and sorts.\nCommon “gotchas” in your language of choice, such as whether strings are immutable, and how memory is managed.\nObject Oriented Programming concepts like class versus object, and inheritance.\nAt the beginning of your career, you’ll need to shine on these sorts of questions, since you don’t have the experiences to prove that you will be good at the job. There are two resources that I always recommend when preparing for interviews:\n\n“Cracking the Coding Interview”, a fantastic book that includes a lot of coding problems and their solutions, as well as summaries of what you need to know to solve them\nCodeWars, a website that has a large collection of coding problems that you can solve in the browser using a wide selection of languages. The most useful part is seeing how other users solved the same problem. You’ll get to see different approaches to the same problem and learn new tools in the language of your choice.\nGive yourself that extra edge\nThere are several things you can do that will give you that little something extra.\n\n\nFirst, learn to communicate your experiences. You should have an elevator pitch that summarizes your resume into a coherent and engaging narrative.\n\nIn addition, know your own résumé! It sounds silly, but I’ve seen a lot of interviewees struggle to explain a particular item on their résumé. You should be able to answer questions about any experience that you list on your résumé and explain how it’s made you a better candidate for the job.\n\nNext, have code samples to show on GitHub (or another public repository).\n\nSeeing is believing, and interviewers being able to see your code will do wonders. Plus, it shows you have an understanding of version control systems.\n\nThe code samples don’t have to be anything too complex, but they do need to be clean and show good coding practices. This is your chance to show how you code without the time-pressure of a coding interview.\n\nOnce you’ve done all of the above, it’s time to consider participating in an open source project. It will show you can work in an existing code base and collaborate with other programmers.\n\nThis will be the closest you can get to programming in an industry environment without actually being in an industry environment. This is by far the hardest and time-consuming item so far, so reserve it until you’ve completed the lower hanging fruit I’ve discussed above.\n\nInterviewing your interviewer\nIn the rush and stress of the job hunt, many candidates forget that interviewing is a two-way street. As the company is trying to figure out whether you’re the right person for the job, you should be figuring out if the company is the right fit for you.\n\nMake sure that you get to ask some of the questions below, even if it’s in a follow-up email. Be aware that often times, companies might try to spin not following best engineering practices as a perk, so read between the lines.\n\nHere are some example questions you could ask:\n\n“What would a typical workday look like for me?”\n\nIt’s important to know what to expect from a particular position because Software Engineering jobs vary quite a bit. You might be expected to upkeep servers or talk to clients directly, for example.\n\nRed flag: “I’m not sure.” → Means that the people interviewing you won’t be on your team, or they don’t have a clear idea why they’re hiring you.\n\n“How do you test your software?”\n\nIdeally, a combination of unit testing, manual testing, and automated testing should be used to verify the quality of the code.\n\nRed flag: “We just don’t write bugs, haha.” → Those people are exactly the ones writing bugs.\n\n“What version control system do you use?”\n\nVersion control systems are extremely useful for collaboration and there are zero reasons to not use one in a professional setting.\n\nRed flag #1: “Uh, version control system?” → Run far, far away.\n\n\nAlways use version control.\nRed flag #2: “<insert obscure or custom VCS>” → Indicates they’re most likely not keeping up with the times and haven’t updated their infrastructure in a long time.\n\n“Do you do peer reviews?”\n\nPeer reviews, or having someone else look at your code before it goes into the code base, is a fantastic way to spot silly mistakes and is a vital training opportunity when starting your career.\n\nRed flag: “We just trust each other!” → Very likely that the senior developers are very protective of their code and not great at receiving feedback.\n\n“What programs do you have for continuous education?”\n\nBeing a software engineer means constantly learning as technologies appear, mature and become out-dated at a dizzying rate. As such, many companies have a training budget that they use to pay for university and online classes, conferences, or in-house talks.\n\nRed flag: “You mean reading stuff online in your free time?” → The company is either strapped for cash or sees developers as replaceable and not as long-term investments.\n\n\n“What’s the software development process that you use?”\n\nProcess is vital to software engineering, regardless of the actual details. The particulars of what constitutes optimal process are subject to intense debate, but the mere existence of an agreed upon way of working on a project minimizes chaos and ensures everybody is on the same page.\n\nRed flag: “Our process is inspired by free-form jazz.” → Most likely the entire department is in fire-fighting mode, jumping from emergency to emergency without any clear goal.\n\n“How do you tackle technical debt?”\n\nTechnical debt is an accumulation of outdated technologies and quick-but-dirty solutions in the code base. Addressing it is important to the long-term health of the code and should be done on a continuous basis.\n\n\nRed flag: “We’re exclusively focused on new features.” → Their code base is a mess or it will be soon.\n\n“What’s your company culture like?”\n\nCompany culture might be a very vague concept, but even small things like an open office versus cubicles will change your day-to-day interaction with colleagues in significant ways. There are no general red flags, but make sure their answer is something you can live with for 40+ hours a week for years.\n\nWorking as a Software Engineer\nAt this stage, if you performed well in your interviews and liked how the interviewers answered your questions, you’ll likely be hired.\n\nCongrats, You’re Officially an Engineer!\n\nNow what? Well, it’s time to relearn a lot of things about coding and working. And since we’re programmers, let’s start by discussing code.\n\nGood Industry Code\nGood industry code has the following properties, in that order:\n\nReadable, because code is read and maintained more often than it is written. The intent of the code must be clear to other developers years after you’ve written it.\nDefensive, as in following best practices of defensive coding. Defensive coding is a topic all on its own, but the gist of it is: You have to ensure that improper use of classes and methods you’ve written won’t lead to your code crashing the software.\nOptimized, which is last on this list because most of the time, you won’t really need to worry about it. That doesn’t mean you should write bad code that does something in O(n³) when a linear solution exists. But developers are generally eager to try and over-optimize when there’s no need for it, often at the detriment of the readability and defensibility of the code. You should always be able to prove that a certain optimization that sacrifices those properties is actually needed.\nNow that you know how to write good industry code:\n\nYou Won’t be Doing Much Coding\nIt may come as a surprise, but most of the time you won’t be writing new code, but instead, you’ll be:\n\nDebugging\nReading existing code\nIn meetings or writing emails\nResearching what to do so you don’t write code\nTherefore skills other than coding will be just as vital for your career.\n\nDebugging and Reading Code\n\nYou’ll need a lot more than debugging using print statements. All widely-used languages and tech stacks have a variety of powerful tools. Learn to use them as they’ll make debugging a breeze and save you countless hours.\nUnderstand the code base. Most tech stacks have some sort of code graph generation tools that will help you understand the structure of the code base. Enterprise IDEs generally have that functionality built in. You can also explore the code using tools such as ReSharper, grep or Sourcegraph.\nUnderstand the product. You’ll be surprised how many developers don’t know how the software is supposed to work before they try to “fix” it. Just read the documentation.\nOrganize Your Thoughts\nSince a lot of your time will be spent in communication, research and multi-tasking, you need some tools to help keep everything in order.\n\nTODO lists / Tasking: Your company should already have tasking software of some kind, but it helps to have a personal system as well. Use post-it notes or software like Trello or Todoist.\nNotes: Always take notes in meetings, work to improve existing documentation and create a personal knowledge base. Use Evernote, OneNote, or a notebook, like in the olden days. It might seem like overkill, but you’ll be thanking yourself a year later when you’re revisiting that obscure build process which took you 3 days to figure out the first time. I’ve never met a good Software Engineer who didn’t take extensive notes.\nCharts/Visualizations: Humans are visual creatures and creating charts of processes and architectures will help you and others understand complex topics. Diagrams are particularly useful when communicating with non-technical colleagues. Use Lucidchart, Visio or a plain whiteboard.\nKnow When to Use Libraries\nShort answer: Almost all the time.\n\nLong answer: 99% of the time, you shouldn’t reinvent the wheel. In most Software Engineering positions, implementing a particular kind of sort is a complete waste of time. That doesn’t mean you shouldn’t know how the algorithms and data structures you use work, since that will help you decide what to use and when.\n\nIn order to be an efficient Software Engineer, you need to understand the libraries that you have at your disposal. The standard libraries of most popular languages are extremely useful and are larger than what you’d expect. In addition, the code base might also utilize additional, specialized libraries. Read their documentation and know when to use them.\n\nYou should also not be afraid to suggest additional libraries if they will save time. However, you need to ensure that you pick a good library for industry use. A good library is:\n\nOpen source, so you can verify the quality of code yourself and potentially fix bugs that are critical to your application.\nLicensed under a permissive license such as MIT and BSD, so your company doesn’t run into any issues by using it. Be careful with GPL, lest you open source your entire code base by accident.\nMature, i.e. it has been out for some time and has a rich set of features.\nMaintained, with new releases coming out often.\nUsed by other companies or projects, which acts as a stamp of approval and ensures it has industry support for continued maintenance.\nContinuous Improvement\nIn addition to learning the skills that will make you better at your day-to-day job, you’ll also need to continuously improve your skills and learn new ones, in order to create new career opportunities for yourself.\n\nThe opportunities to learn are many and a lot of them are quite affordable:\n\nOnline Courses: The opportunity to learn from the best professors in the field in a flexible format shouldn’t be missed. Check out Coursera, Udacity, and edX (among many) for courses that can supplement your existing skills.\nOnline Master’s Degrees: A recent trend among top-ranked universities, online Master’s Degrees are a flexible way to continue your formal education. They are also generally less expensive thank on-campus degrees, with most programs costing ~$10,000 for the entire degree. Georgia Tech, UT, and UC San Diego are some of the universities offering such degrees. I personally recommend Georgia Tech’s Online Master’s which I graduated from this year.\nBlogs: Blogs are an important part of the developer community (no surprise here, as you’re reading one right now). Blogs such as Coding Horror, Joel on Software, or even more humorous websites such as The Daily WTF can give you a good idea of what and what not to do as a Software Engineer. Browsing Medium, r/programming, HackerNews or other feeds will also lead you to good articles and blogs.\nConferences: Last, but not least, conferences are an amazing learning opportunity and you should definitely take advantage of your company’s training budget by going to them. A very incomplete list of good conferences to check out (alongside their topic): GOTO; (General), Strange Loop (General), PyCon (Python), CPPCon (C++), DEF CON (Security), Fluent (Web dev). All of these also have videos of (most) talks on YouTube so you will be able to learn something even if you can’t attend!\n','https://medium.freecodecamp.org/a-software-engineering-survival-guide-fe3eafb47166','others','2018-11-12 16:26:22','Jason',NULL,'jason',2),(9,'前端基础进阶（七）：函数与函数式编程','这波能反杀','纵观JavaScript中所有必须需要掌握的重点知识中，函数是我们在初学的时候最容易忽视的一个知识点。在学习的过程中，可能会有很多人、很多文章告诉你面向对象很重要，原型很重要，可是却很少有人告诉你，面向对象中所有的重点难点，几乎都与函数息息相关。\n\n包括我之前几篇文章介绍的执行上下文，变量对象，闭包，this等，都是围绕函数的细节来展开。\n\n我知道很多人在学习中，很急切的希望自己快一点开始学习面向对象，学习模块，学习流行框架，然后迅速成为高手。但是我可以很负责的告诉你，关于函数的这些基础东西没理解到一定程度，那么你的学习进展一定是举步维艰的。\n\n所以，大家一定要重视函数！\n\n当然，关于函数的重点，难点在前面几篇文章都已经说得差不多了，这篇文章主要总结一下函数的基础知识，并初步学习函数式编程的思维。\n\n一、函数声明、函数表达式、匿名函数与自执行函数\n关于函数在实际开发中的应用，大体可以总结为函数声明、函数表达式、匿名函数、自执行函数。\n\n函数声明\n\n我们知道，JavaScript中，有两种声明方式，一个是使用var的变量声明，另一个是使用function的函数声明。\n\n在前端基础进阶（三）：变量对象详解中我有提到过，变量对象的创建过程中，函数声明比变量声明具有更为优先的执行顺序，即我们常常提到的函数声明提前。因此我们在执行上下文中，无论在什么位置声明了函数，我们都可以在同一个执行上下文中直接使用该函数。\n\nfn();  // function\n\nfunction fn() {\n    console.log(\'function\');\n}\n** 函数表达式 **\n\n与函数声明不同，函数表达式使用了var进行声明，那么我们在确认他是否可以正确使用的时候就必须依照var的规则进行判断，即变量声明。我们知道使用var进行变量声明，其实是进行了两步操作。\n\n// 变量声明\nvar a = 20;\n\n// 实际执行顺序\nvar a = undefined;  // 变量声明，初始值undefined，变量提升，提升顺序次于function声明\na = 20;  // 变量赋值，该操作不会提升\n同样的道理，当我们使用变量声明的方式来声明函数时，就是我们常常说的函数表达式。函数表达的提升方式与变量声明一致。\n\nfn(); // 报错\nvar fn = function() {\n    console.log(\'function\');\n}\n上例子的执行顺序为：\n\nvar fn = undefined;   // 变量声明提升\nfn();    // 执行报错\nfn = function() {   // 赋值操作，此时将后边函数的引用赋值给fn\n    console.log(\'function\');\n}\n因此，由于声明方式的不同，导致了函数声明与函数表达式在使用上的一些差异需要我们注意，除此之外，这两种形式的函数在使用上并无不同。\n\n关于上面例子中，函数表达式中的赋值操作，在其他一些地方也会被经常使用，我们清楚其中的关系即可。\n\n在构造函数中添加方法\nfunction Person(name) {\n    this.name = name;\n    this.age = age;\n    // 在构造函数内部中添加方法\n    this.getAge = function() {\n        return this.age;\n    }\n    this.\n}\n// 给原型添加方法\nPerson.prototype.getName = function() {\n    return this.name;\n}\n\n// 在对象中添加方法\nvar a = {\n    m: 20,\n    getM: function() {\n        return this.m;\n    }\n}\n\n匿名函数\n\n在上面我们大概讲述了函数表达式中的赋值操作。而匿名函数，顾名思义，就是指的没有被显示进行赋值操作的函数。它的使用场景，多作为一个参数传入另一个函数中。\n\nvar a = 10;\nvar fn = function(bar, num) {\n    return bar() + num;\n}\n\nfn(function() {\n    return a;\n}, 20)\n在上面的例子中，fn的第一个参数传入了一个匿名函数。虽然该匿名函数没有显示的进行赋值操作，我们没有办法在外部执行上下文中引用到它，但是在fn函数内部，我们将该匿名函数赋值给了变量bar，保存在了fn变量对象的arguments对象中。\n\n// 变量对象在fn上下文执行过程中的创建阶段\nVO(fn) = {\n    arguments: {\n        bar: undefined,\n        num: undefined,\n        length: 2\n    }\n}\n\n// 变量对象在fn上下文执行过程中的执行阶段\n// 变量对象变为活动对象，并完成赋值操作与执行可执行代码\nVO -> AO\n\nAO(fn) = {\n    arguments: {\n        bar: function() { return a },\n        num: 20,\n        length: 2\n    }\n}\n由于匿名函数传入另一个函数之后，最终会在另一个函数中执行，因此我们也常常称这个匿名函数为回调函数。关于匿名函数更多的内容，我会在下一篇深入探讨柯里化的文章中进行更加详细讲解。\n\n匿名函数的这个应用场景几乎承担了函数的所有难以理解的知识点，因此我们一定要对它的这些细节了解的足够清楚，如果对于变量对象的演变过程你还看不太明白，一定要回过头去看这篇文章：前端基础进阶（三）：变量对象详解\n\n函数自执行与块级作用域\n\n在ES5中，没有块级作用域，因此我们常常使用函数自执行的方式来模仿块级作用域，这样就提供了一个独立的执行上下文，结合闭包，就为模块化提供了基础。而函数自执行，其实是匿名函数的一种应用。\n\n(function() {\n   // ...\n})();\n一个模块往往可以包括：私有变量、私有方法、公有变量、公有方法。\n\n根据作用域链的单向访问，外面可能很容易知道在这个独立的模块中，外部执行环境是无法访问内部的任何变量与方法的，因此我们可以很容易的创建属于这个模块的私有变量与私有方法。\n\n(function() {\n    // 私有变量\n    var age = 20;\n    var name = \'Tom\';\n\n    // 私有方法\n    function getName() {\n        return `your name is ` + name;\n    }\n})();\n但是共有方法和变量应该怎么办？大家还记得我们前面讲到过的闭包的特性吗？没错，利用闭包，我们可以访问到执行上下文内部的变量和方法，因此，我们只需要根据闭包的定义，创建一个闭包，将你认为需要公开的变量和方法开放出来即可。\n\n如果你对闭包了解不够，前端基础进阶（四）：详细图解作用域链与闭包应该可以帮到你。\n\n(function() {\n    // 私有变量\n    var age = 20;\n    var name = \'Tom\';\n\n    // 私有方法\n    function getName() {\n        return `your name is ` + name;\n    }\n\n    // 共有方法\n    function getAge() {\n        return age;\n    }\n\n    // 将引用保存在外部执行环境的变量中，形成闭包，防止该执行环境被垃圾回收\n    window.getAge = getAge;\n})();\n当然，闭包在模块中的重要作用，我们也在讲解闭包的时候已经强调过，但是这个知识点真的太重要，需要我们反复理解并且彻底掌握，因此为了帮助大家进一步理解闭包，我们来看看jQuery中，是如何利用我们模块与闭包的。\n\n// 使用函数自执行的方式创建模块\n(function(window, undefined) {\n\n    // 声明jQuery构造函数\n     var jQuery = function(name) {\n\n        // 主动在构造函数中，返回一个jQuery实例\n         return new jQuery.fn.init(name);\n     }\n\n    // 添加原型方法\n     jQuery.prototype = jQuery.fn = {\n         constructor: jQuery,\n         init:function() { ... },\n         css: function() { ... }\n     }\n     jQuery.fn.init.prototype = jQuery.fn;\n\n    // 将jQuery改名为$，并将引用保存在window上，形成闭包，对外开发jQuery构造函数，这样我们就可以访问所有挂载在jQuery原型上的方法了\n     window.jQuery = window.$ = jQuery;\n })(window);\n\n// 在使用时，我们直接执行了构造函数，因为在jQuery的构造函数中通过一些手段，返回的是jQuery的实例，所以我们就不用再每次用的时候在自己new了\n$(\'#div1\');\n在这里，我们只需要看懂闭包与模块的部分就行了，至于内部的原型链是如何绕的，为什么会这样写，我在讲面向对象的时候会为大家慢慢分析。举这个例子的目的所在，就是希望大家能够重视函数，因为在实际开发中，它无处不在。\n\n接下来我要分享一个高级的，非常有用的模块的应用。当我们的项目越来越大，那么需要保存的数据与状态就越来越多，因此，我们需要一个专门的模块来维护这些数据，这个时候，有一个叫做状态管理器的东西就应运而生。对于状态管理器，最出名的，我想非redux莫属了。虽然对于还在学习中的大家来说，redux是一个有点高深莫测的东西，但是在我们学习之前，可以先通过简单的方式，让大家大致了解状态管理器的实现原理，为我们未来的学习奠定坚实的基础。\n\n先来直接看代码。\n\n// 自执行创建模块\n(function() {\n    // states 结构预览\n    // states = {\n    //     a: 1,\n    //     b: 2,\n    //     m: 30,  \n    //     o: {}\n    // }\n    var states = {};  // 私有变量，用来存储状态与数据\n\n    // 判断数据类型\n    function type(elem) {\n        if(elem == null) {\n            return elem + \'\';\n        }\n        return toString.call(elem).replace(/[\\[\\]]/g, \'\').split(\' \')[1].toLowerCase();\n    }\n\n\n    /**\n     * @Param name 属性名\n     * @Description 通过属性名获取保存在states中的值\n    */\n    function get(name) {\n        return states[name] ? states[name] : \'\';\n    }\n\n    function getStates() {\n        return states;\n    }\n\n    /*\n    * @param options {object} 键值对\n    * @param target {object} 属性值为对象的属性，只在函数实现时递归中传入\n    * @desc 通过传入键值对的方式修改state树，使用方式与小程序的data或者react中的setStates类似\n    */\n    function set(options, target) {\n        var keys = Object.keys(options);\n        var o = target ? target : states;\n\n        keys.map(function(item) {\n            if(typeof o[item] == \'undefined\') {\n                o[item] = options[item];\n            }\n            else {\n                type(o[item]) == \'object\' ? set(options[item], o[item]) : o[item] = options[item];\n            }\n            return item;\n        })\n    }\n\n    // 对外提供接口\n    window.get = get;\n    window.set = set;\n    window.getStates = getStates;\n})()\n\n// 具体使用如下\n\nset({ a: 20 });     // 保存 属性a\nset({ b: 100 });    // 保存属性b\nset({ c: 10 });     // 保存属性c\n\n// 保存属性o, 它的值为一个对象\nset({\n    o: {\n        m: 10,\n        n: 20\n    }\n})\n\n// 修改对象o 的m值\nset({\n    o: {\n        m: 1000\n    }\n})\n\n// 给对象o中增加一个c属性\nset({\n    o: {\n        c: 100\n    }\n})\nconsole.log(getStates())\ndemo实例在线地址\n\n我之所以说这是一个高级应用，是因为在单页应用中，我们很可能会用到这样的思路。根据我们提到过的知识，理解这个例子其实很简单，其中的难点估计就在于set方法的处理上，因为为了具有更多的适用性，因此做了很多适配，用到了递归等知识。如果你暂时看不懂，没有关系，知道如何使用就行了，上面的代码可以直接运用于实际开发。记住，当你需要保存的状态太多的时候，你就想到这一段代码就行了。\n\n函数自执行的方式另外还有其他几种写法，诸如!function(){}()，+function(){}()\n\n二、函数参数传递方式：按值传递\n还记得基本数据类型与引用数据类型在复制上的差异吗？基本数据类型复制，是直接值发生了复制，因此改变后，各自相互不影响。但是引用数据类型的复制，是保存在变量对象中的引用发生了复制，因此复制之后的这两个引用实际访问的实际是同一个堆内存中的值。当改变其中一个时，另外一个自然也被改变。如下例。\n\nvar a = 20;\nvar b = a;\nb = 10;\nconsole.log(a);  // 20\n\nvar m = { a: 1, b: 2 }\nvar n = m;\nn.a = 5;\nconsole.log(m.a) // 5\n当值作为函数的参数传递进入函数内部时，也有同样的差异。我们知道，函数的参数在进入函数后，实际是被保存在了函数的变量对象中，因此，这个时候相当于发生了一次复制。如下例。\n\nvar a = 20;\n\nfunction fn(a) {\n    a = a + 10;\n    return a;\n}\nfn(a);\nconsole.log(a); // 20\nvar a = { m: 10, n: 20 }\nfunction fn(a) {\n    a.m = 20;\n    return a;\n}\n\nfn(a);\nconsole.log(a);   // { m: 20, n: 20 }\n正是由于这样的不同，导致了许多人在理解函数参数的传递方式时，就有许多困惑。到底是按值传递还是按引用传递？实际上结论仍然是按值传递，只不过当我们期望传递一个引用类型时，真正传递的，只是这个引用类型保存在变量对象中的引用而已。为了说明这个问题，我们看看下面这个例子。\n\nvar person = {\n    name: \'Nicholas\',\n    age: 20\n}\n\nfunction setName(obj) {  // 传入一个引用\n    obj = {};   // 将传入的引用指向另外的值\n    obj.name = \'Greg\';  // 修改引用的name属性\n}\n\nsetName(person);\nconsole.log(person.name);  // Nicholas 未被改变\n在上面的例子中，如果person是按引用传递，那么person就会自动被修改为指向其name属性值为Gerg的新对象。但是我们从结果中看到，person对象并未发生任何改变，因此只是在函数内部引用被修改而已。\n\n四、函数式编程\n虽然JavaScript并不是一门纯函数式编程的语言，但是它使用了许多函数式编程的特性。因此了解这些特性可以让我们更加了解自己写的代码。\n\n当我们想要使用一个函数时，通常情况下其实就是想要将一些功能，逻辑等封装起来。相信大家对于封装这个概念并不陌生。\n\n我们通常通过函数封装来完成一件事情。例如，我想要计算任意三个数的和，我们就可以将这三个数作为参数，封装一个简单的函数。\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\n当我们想要计算三个数的和时，直接调用该方法即可。\n\nadd(1, 2, 3); // 6\n当然，当我们想要做的事情比较简单的时候，可能还看不出来封装成为函数之后带来的便利。如果我们想要做的事情稍微复杂一点呢。例如我想要计算一个数组中的所有子项目的和。\n\nfunction mergeArr(arr) {\n    var result = 0;\n    for(var i = 0; i < arr.length; i++) { result  += arr[i] }\n    return result;\n}\n如果我们不通过函数封装的方式，那么再每次想要实现这个功能时，就不得不重新使用一次for循环，这样的后果就是我们的代码中充斥着越来越多的重复代码。而封装之后，当我们想要再次做这件事情的时候，只需要一句话就可以了。\n\nmergeArr([1, 2, 3, 4, 5]);\n当然，我相信大家对于函数封装的意义都应该有非常明确的认知，但是我们要面临的问题是，当我们想要去封装一个函数时，如何做才是最佳实践呢？\n\n函数式编程能给我们答案。\n\n我们在初学时，往往会不由自主的使用命令式编程的风格来完成我们想要干的事情。因为命令式编程更加的简单，直白。例如我们现在有一个数组，array = [1, 3, \'h\', 5, \'m\', \'4\']，现在想要找出这个数组中的所有类型为number的子项。当我们使用命令式编程思维时，可能就会直接这样做。\n\nvar array = [1, 3, \'h\', 5, \'m\', \'4\'];\nvar res = [];\nfor(var i = 0; i < array.length; i ++) {\n    if (typeof array[i] === \'number\') {\n        res.push(array[i]);\n    }\n}\n在这种实现方式中，我们平铺直叙的实现了我们的目的。这样做的问题在于，当我们在另外的时刻，想要找出另外一个数组中所有的子项时，我们不得不把同样的逻辑再写一次。当出现次数变多时，我们的代码也变得更加糟糕且难以维护。\n\n而函数式编程的思维则建议我们将这种会多次出现的功能封装起来以备调用。\n\nfunction getNumbers(array) {\n    var res = [];\n    array.forEach(function(item) {\n        if (typeof item === \'number\') {\n            res.push(item);\n        }\n    })\n    return res;\n}\n\n\n\n// 以上是我们的封装，以下是功能实现\nvar array = [1, 3, \'h\', 5, \'m\', \'4\'];\nvar res = getNumbers(array);\n因此当我们将功能封装之后，我们实现同样的功能时，只需要写一行代码。而如果未来需求变动，或者稍作修改，我们只需要对getNumbers方法进行调整就可以了。而且我们在使用时，只需要关心这个方法能做什么，而不用关心他具体是怎么实现的。这也是函数式编程思维与命令式不同的地方之一。\n\n函数式编程思维还具有以下几个特征。\n\n函数是第一等公民\n\n所谓\"第一等公民\"（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。这些场景，我们应该见过很多。\n\nvar a = function foo() {}  // 赋值\nfunction fn(function() {}, num) {}   // 函数作为参数\n\n// 函数作为返回值\nfunction var() {\n    return function() {\n        ... ...\n    }\n}\n\n当然，这都是JavaScript的基本概念。但是我想很多人，甚至包括正在阅读的你自己都可能会无视这些概念。可以用一个简单的例子来验证一下。\n\n我们先自定义这样一个函数。\n\nfunction delay() {\n    console.log(\'5000ms之后执行该方法.\');\n}\n现在要做的是，如果要求你结合setTimeout方法，让delay方法延迟5000ms执行，应该怎么做？\n\n其实很简单，对不对，直接这样就可以了。\n\nvar timer = setTimeout(function() {\n    delay();\n}, 5000);\n那么现在问题来了，如果你对函数是一等公民有一个深刻的认知，我想你会发现上面这种写法其实是有一些问题的。所以思考一下，问题出在哪里？\n\n函数既然能够作为一个参数传入另外一个函数，那么我们是不是可以直接将delay作为setTimeout的第一个参数，而不用额外的多加一层匿名函数呢？\n\n因此，其实最正确的解法应该这样写。\n\nvar timer = setTimeout(delay, 5000);\n当然，如果你已经提前想到这样做了，那么恭喜你，说明你在JavaScript上比普通人更有天赋。其实第一种糟糕的方式很多人都在用，包括有多年工作经验的人也没有完全避免。而他们甚至还不知道自己问题出在什么地方。\n\n在未来的实践中，你还会遇到更多类似的场景。为了验证读者朋友们的理解，我们不妨来思考一下如何优化下面的代码。\n\nfunction getUser(path, callback) {\n    return $.get(path, function(info) {\n        return callback(info);\n    })\n}\n\ngetUser(\'/api/user\', function(resp) {\n    // resp为成功请求之后返回的数据\n    console.log(resp);\n})\n优化的原理和setTimeout的例子一模一样，我这里卖个关子，不打算告诉大家结论，仅提示一句，getUser优化之后，仅有一句代码。考验大家学习成果的时候到了 ^ ^。\n\n只用\"表达式\"，不用\"语句\"\n\n\"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。\n\n假如我们的项目中，多处需要改变某个元素的背景色。因此我们可以这样封装一下。\n\nvar ele = document.querySelector(\'.test\');\nfunction setBackgroundColor(color) {\n    ele.style.backgroundColor = color;\n}\n\n// 多处使用\nsetBackgroundColor(\'red\');\nsetBackgroundColor(\'#ccc\');\n我们可以很明显的感受到，setBackgroundColor封装的仅仅只是一条语句。这并不是理想的效果。函数式编程期望一个函数有输入，也有输出。因此良好的习惯应该如下做。\n\nfunction setBackgroundColor(ele, color) {\n    ele.style.backgroundColor = color;\n    return color;\n}\n\n// 多处使用\nvar ele = document.querySelector(\'.test\');\nsetBackgroundColor(ele, \'red\');\nsetBackgroundColor(ele, \'#ccc\');\n了解这一点，可以让我们自己在封装函数的时候养成良好的习惯。\n\n纯函数\n\n相同的输入总会得到相同的输出，并且不会产生副作用的函数，就是纯函数。\n\n所谓\"副作用\"（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。\n\n函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。\n\n即所谓的只要是同样的参数传入，返回的结果一定是相等的。\n\n例如我们期望封装一个函数，能够得到传入数组的最后一项。那么可以通过下面两种方式来实现。\n\nfunction getLast(arr) {\n    return arr[arr.length];\n}\n\nfunction getLast_(arr) {\n    return arr.pop();\n}\n\nvar source = [1, 2, 3, 4];\n\nvar last = getLast(source); // 返回结果4 原数组不变\nvar last_ = getLast_(source); // 返回结果4 原数据最后一项被删除\ngetLast与getLast_虽然同样能够获得数组的最后一项值，但是getLast_改变了原数组。而当原始数组被改变，那么当我们再次调用该方法时，得到的结果就会变得不一样。这样不可预测的封装方式，在我们看来是非常糟糕的。它会把我们的数据搞得非常混乱。在JavaScript原生支持的数据方法中，也有许多不纯的方法，我们在使用时需要非常警惕，我们要清晰的知道原始数据的改变是否会留下隐患。\n\nvar source = [1, 2, 3, 4, 5];\n\nsource.slice(1, 3); // 纯函数 返回[2, 3] source不变\nsource.splice(1, 3); // 不纯的 返回[2, 3, 4] source被改变\n\nsource.pop(); // 不纯的\nsource.push(6); // 不纯的\nsource.shift(); // 不纯的\nsource.unshift(1); // 不纯的\nsource.reverse(); // 不纯的\n\n// 我也不能短时间知道现在source被改变成了什么样子，干脆重新约定一下\nsource = [1, 2, 3, 4, 5];\n\nsource.concat([6, 7]); // 纯函数 返回[1, 2, 3, 4, 5, 6, 7] source不变\nsource.join(\'-\'); // 纯函数 返回1-2-3-4-5 source不变\n闭包\n\n闭包是函数式编程语言的重要特性，我也在前面几篇文章中说了很多关于闭包的内容。这里不再赘述。\n\n作者：这波能反杀\n链接：https://www.jianshu.com/p/69dede6f7e5f\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。','https://www.jianshu.com/p/69dede6f7e5f','javascript','2018-11-12 17:11:59','Jason',NULL,'jason',6),(10,'前端基础进阶（八）：深入详解函数的柯','这波能反杀','柯里化是函数的一个比较高级的应用，想要理解它并不简单。因此我一直在思考应该如何更加表达才能让大家理解起来更加容易。\n\n以下是新版本讲解。高阶函数章节由于一些原因并未公开，大家可以自行搜索学习\n\n通过上一个章节的学习我们知道，接收函数作为参数的函数，都可以叫做高阶函数。我们常常利用高阶函数来封装一些公共的逻辑。\n\n这一章我们要学习的柯里化，其实就是高阶函数的一种特殊用法。\n\n柯里化是指这样一个函数(假设叫做createCurry)，他接收函数A作为参数，运行后能够返回一个新的函数。并且这个新的函数能够处理函数A的剩余参数。\n\n这样的定义可能不太好理解，我们可以通过下面的例子配合理解。\n\n假如有一个接收三个参数的函数A。\n\nfunction A(a, b, c) {\n    // do something\n}\n又假如我们有一个已经封装好了的柯里化通用函数createCurry。他接收bar作为参数，能够将A转化为柯里化函数，返回结果就是这个被转化之后的函数。\n\nvar _A = createCurry(A);\n那么_A作为createCurry运行的返回函数，他能够处理A的剩余参数。因此下面的运行结果都是等价的。\n\n_A(1, 2, 3);\n_A(1, 2)(3);\n_A(1)(2, 3);\n_A(1)(2)(3);\nA(1, 2, 3);\n函数A被createCurry转化之后得到柯里化函数_A，_A能够处理A的所有剩余参数。因此柯里化也被称为部分求值。\n\n在简单的场景下，我们可以不用借助柯里化通用式来转化得到柯里化函数，我们可以凭借眼力自己封装。\n\n例如有一个简单的加法函数，他能够将自身的三个参数加起来并返回计算结果。\n\nfunction add(a, b, c) {\n    return a + b + c;\n}\n那么add函数的柯里化函数_add则可以如下：\n\nfunction _add(a) {\n    return function(b) {\n        return function(c) {\n            return a + b + c;\n        }\n    }\n}\n因此下面的运算方式是等价的。\n\nadd(1, 2, 3);\n_add(1)(2)(3);\n当然，柯里化通用式具备更加强大的能力，我们靠眼力自己封装的柯里化函数则自由度偏低。因此我们仍然需要知道自己如何去封装这样一个柯里化的通用式。\n\n首先通过_add可以看出，柯里化函数的运行过程其实是一个参数的收集过程，我们将每一次传入的参数收集起来，并在最里层里面处理。因此我们在实现createCurry时，可以借助这个思路来进行封装。\n\n封装如下:\n\n// 简单实现，参数只能从右到左传递\nfunction createCurry(func, args) {\n\n    var arity = func.length;\n    var args = args || [];\n\n    return function() {\n        var _args = [].slice.call(arguments);\n        [].push.apply(_args, args);\n\n        // 如果参数个数小于最初的func.length，则递归调用，继续收集参数\n        if (_args.length < arity) {\n            return createCurry.call(this, func, _args);\n        }\n\n        // 参数收集完毕，则执行func\n        return func.apply(this, _args);\n    }\n}\n尽管我已经做了足够详细的注解，但是我想理解起来也并不是那么容易，因此建议大家用点耐心多阅读几遍。这个createCurry函数的封装借助闭包与递归，实现了一个参数收集，并在收集完毕之后执行所有参数的一个过程。\n\n因此聪明的读者可能已经发现，把函数经过createCurry转化为一个柯里化函数，最后执行的结果，不是正好相当于执行函数自身吗？柯里化是不是把简单的问题复杂化了？\n\n如果你能够提出这样的问题，那么说明你确实已经对柯里化有了一定的了解。柯里化确实是把简答的问题复杂化了，但是复杂化的同时，我们在使用函数时拥有了更加多的自由度。而这里对于函数参数的自由处理，正是柯里化的核心所在。\n\n我们来举一个非常常见的例子。\n\n如果我们想要验证一串数字是否是正确的手机号，那么按照普通的思路来做，大家可能是这样封装，如下：\n\nfunction checkPhone(phoneNumber) {\n    return /^1[34578]\\d{9}$/.test(phoneNumber);\n}\n而如果我们想要验证是否是邮箱呢？这么封装：\n\nfunction checkEmail(email) {\n    return /^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/.test(email);\n}\n我们还可能会遇到验证身份证号，验证密码等各种验证信息，因此在实践中，为了统一逻辑，，我们就会封装一个更为通用的函数，将用于验证的正则与将要被验证的字符串作为参数传入。\n\nfunction check(targetString, reg) {\n    return reg.test(targetString);\n}\n但是这样封装之后，在使用时又会稍微麻烦一点，因为会总是输入一串正则，这样就导致了使用时的效率低下。\n\ncheck(/^1[34578]\\d{9}$/, \'14900000088\');\ncheck(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/, \'test@163.com\');\n那么这个时候，我们就可以借助柯里化，在check的基础上再做一层封装，以简化使用。\n\nvar _check = createCurry(check);\n\nvar checkPhone = _check(/^1[34578]\\d{9}$/);\nvar checkEmail = _check(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/);\n最后在使用的时候就会变得更加直观与简洁了。\n\ncheckPhone(\'183888888\');\ncheckEmail(\'xxxxx@test.com\');\n经过这个过程我们发现，柯里化能够应对更加复杂的逻辑封装。当情况变得多变，柯里化依然能够应付自如。\n\n虽然柯里化确实在一定程度上将问题复杂化了，也让代码更加不容易理解，但是柯里化在面对复杂情况下的灵活性却让我们不得不爱。\n\n当然这个案例本身情况还算简单，所以还不能够特别明显的凸显柯里化的优势，我们的主要目的在于借助这个案例帮助大家了解柯里化在实践中的用途。\n\n我们继续来思考一个例子。这个例子与map有关。在高阶函数的章节中，我们分析了封装map方法的思考过程。由于我们没有办法确认一个数组在遍历时会执行什么操作，因此我们只能将调用for循环的这个统一逻辑封装起来，而具体的操作则通过参数传入的形式让使用者自定义。这就是map函数。\n\n但是，这是针对了所有的情况我们才会这样想。\n\n实践中我们常常会发现，在我们的某个项目中，针对于某一个数组的操作其实是固定的，也就是说，同样的操作，可能会在项目的不同地方调用很多次。\n\n于是，这个时候，我们就可以在map函数的基础上，进行二次封装，以简化我们在项目中的使用。假如这个在我们项目中会调用多次的操作是将数组的每一项都转化为百分比 1 --> 100%。\n\n普通思维下我们可以这样来封装。\n\nfunction getNewArray(array) {\n    return array.map(function(item) {\n        return item * 100 + \'%\'\n    })\n}\n\ngetNewArray([1, 2, 3, 0.12]);   // [\'100%\', \'200%\', \'300%\', \'12%\'];\n而如果借助柯里化来二次封装这样的逻辑，则会如下实现：\n\nfunction _map(func, array) {\n    return array.map(func);\n}\n\nvar _getNewArray = createCurry(_map);\n\nvar getNewArray = _getNewArray(function(item) {\n    return item * 100 + \'%\'\n})\n\ngetNewArray([1, 2, 3, 0.12]);   // [\'100%\', \'200%\', \'300%\', \'12%\'];\ngetNewArray([0.01, 1]); // [\'1%\', \'100%\']\n如果我们的项目中的固定操作是希望对数组进行一个过滤，找出数组中的所有Number类型的数据。借助柯里化思维我们可以这样做。\n\nfunction _filter(func, array) {\n    return array.filter(func);\n}\n\nvar _find = createCurry(_filter);\n\nvar findNumber = _find(function(item) {\n    if (typeof item == \'number\') {\n        return item;\n    }\n})\n\nfindNumber([1, 2, 3, \'2\', \'3\', 4]); // [1, 2, 3, 4]\n\n// 当我们继续封装另外的过滤操作时就会变得非常简单\n// 找出数字为20的子项\nvar find20 = _find(function(item, i) {\n    if (typeof item === 20) {\n        return i;\n    }\n})\nfind20([1, 2, 3, 30, 20, 100]);  // 4\n\n// 找出数组中大于100的所有数据\nvar findGreater100 = _find(function(item) {\n    if (item > 100) {\n        return item;\n    }\n})\nfindGreater100([1, 2, 101, 300, 2, 122]); // [101, 300, 122]\n我采用了与check例子不一样的思维方向来想大家展示我们在使用柯里化时的想法。目的是想告诉大家，柯里化能够帮助我们应对更多更复杂的场景。\n\n当然不得不承认，这些例子都太简单了，简单到如果使用柯里化的思维来处理他们显得有一点多此一举，而且变得难以理解。因此我想读者朋友们也很难从这些例子中感受到柯里化的魅力。不过没关系，如果我们能够通过这些例子掌握到柯里化的思维，那就是最好的结果了。在未来你的实践中，如果你发现用普通的思维封装一些逻辑慢慢变得困难，不妨想一想在这里学到的柯里化思维，应用起来，柯里化足够强大的自由度一定能给你一个惊喜。\n\n当然也并不建议在任何情况下以炫技为目的的去使用柯里化，在柯里化的实现中，我们知道柯里化虽然具有了更多的自由度，但同时柯里化通用式里调用了arguments对象，使用了递归与闭包，因此柯里化的自由度是以牺牲了一定的性能为代价换来的。只有在情况变得复杂时，才是柯里化大显身手的时候。\n\n额外知识补充\n无限参数的柯里化。\n\n该部分内容可忽略\n\n在前端面试中，你可能会遇到这样一个涉及到柯里化的题目。\n\n// 实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) = 6;\nadd(1, 2, 3)(4) = 10;\nadd(1)(2)(3)(4)(5) = 15;\n这个题目的目的是想让add执行之后返回一个函数能够继续执行，最终运算的结果是所有出现过的参数之和。而这个题目的难点则在于参数的不固定。我们不知道函数会执行几次。因此我们不能使用上面我们封装的createCurry的通用公式来转换一个柯里化函数。只能自己封装，那么怎么办呢？在此之前，补充2个非常重要的知识点。\n\n一个是ES6函数的不定参数。假如我们有一个数组，希望把这个数组中所有的子项展开传递给一个函数作为参数。那么我们应该怎么做？\n\n// 大家可以思考一下，如果将args数组的子项展开作为add的参数传入\nfunction add(a, b, c, d) {\n    return a + b + c + d;\n}\nvar args = [1, 3, 100, 1];\n在ES5中，我们可以借助之前学过的apply来达到我们的目的。\n\nadd.apply(null, args);  // 105\n而在ES6中，提供了一种新的语法来解决这个问题，那就是不定参。写法如下：\n\nadd(...args);  // 105\n这两种写法是等效的。OK，先记在这里。在接下的实现中，我们会用到不定参数的特性。\n\n第二个要补充的知识点是函数的隐式转换。当我们直接将函数参与其他的计算时，函数会默认调用toString方法，直接将函数体转换为字符串参与计算。\n\nfunction fn() { return 20 }\nconsole.log(fn + 10);     // 输出结果 function fn() { return 20 }10\n但是我们可以重写函数的toString方法，让函数参与计算时，输出我们想要的结果。\n\nfunction fn() { return 20; }\nfn.toString = function() { return 30 }\n\nconsole.log(fn + 10); // 40\n除此之外，当我们重写函数的valueOf方法也能够改变函数的隐式转换结果。\n\nfunction fn() { return 20; }\nfn.valueOf = function() { return 60 }\n\nconsole.log(fn + 10); // 70\n当我们同时重写函数的toString方法与valueOf方法时，最终的结果会取valueOf方法的返回结果。\n\nfunction fn() { return 20; }\nfn.valueOf = function() { return 50 }\nfn.toString = function() { return 30 }\n\nconsole.log(fn + 10); // 60\n补充了这两个知识点之后，我们可以来尝试完成之前的题目了。add方法的实现仍然会是一个参数的收集过程。当add函数执行到最后时，仍然返回的是一个函数，但是我们可以通过定义toString/valueOf的方式，让这个函数可以直接参与计算，并且转换的结果是我们想要的。而且它本身也仍然可以继续执行接收新的参数。实现方式如下。\n\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = [].slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var adder = function () {\n        var _adder = function() {\n            // [].push.apply(_args, [].slice.call(arguments));\n            _args.push(...arguments);\n            return _adder;\n        };\n\n        // 利用隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n        _adder.toString = function () {\n            return _args.reduce(function (a, b) {\n                return a + b;\n            });\n        }\n\n        return _adder;\n    }\n    // return adder.apply(null, _args);\n    return adder(..._args);\n}\n\nvar a = add(1)(2)(3)(4);   // f 10\nvar b = add(1, 2, 3, 4);   // f 10\nvar c = add(1, 2)(3, 4);   // f 10\nvar d = add(1, 2, 3)(4);   // f 10\n\n// 可以利用隐式转换的特性参与计算\nconsole.log(a + 10); // 20\nconsole.log(b + 20); // 30\nconsole.log(c + 30); // 40\nconsole.log(d + 40); // 50\n\n// 也可以继续传入参数，得到的结果再次利用隐式转换参与计算\nconsole.log(a(10) + 100);  // 120\nconsole.log(b(10) + 100);  // 120\nconsole.log(c(10) + 100);  // 120\nconsole.log(d(10) + 100);  // 120\n// 其实上栗中的add方法，就是下面这个函数的柯里化函数，只不过我们并没有使用通用式来转化，而是自己封装\nfunction add(...args) {\n    return args.reduce((a, b) => a + b);\n}\n以下为老版本讲解，请勿阅读学习，因为部分思维并不完全正确。\n\n一、补充知识点之函数的隐式转换\nJavaScript作为一种弱类型语言，它的隐式转换是非常灵活有趣的。当我们没有深入了解隐式转换的时候可能会对一些运算的结果会感动困惑，比如4 + true = 5。当然，如果对隐式转换了解足够深刻，肯定是能够很大程度上提高对js的使用能力。只是我没有打算将所有的隐式转换规则分享给大家，这里暂时只分享一下，函数在隐式转换中的一些规则。\n\n来一个简单的思考题。\n\nfunction fn() {\n    return 20;\n}\n\nconsole.log(fn + 10); // 输出结果是多少？\n稍微修改一下，再想想输出结果会是什么？\n\nfunction fn() {\n    return 20;\n}\n\nfn.toString = function() {\n    return 10;\n}\n\nconsole.log(fn + 10);  // 输出结果是多少？\n还可以继续修改一下。\n\nfunction fn() {\n    return 20;\n}\n\nfn.toString = function() {\n    return 10;\n}\n\nfn.valueOf = function() {\n    return 5;\n}\n\nconsole.log(fn + 10); // 输出结果是多少？\n// 输出结果分别为\nfunction fn() {\n    return 20;\n}10\n\n20\n\n15\n当使用console.log，或者进行运算时，隐式转换就可能会发生。从上面三个例子中我们可以得出一些关于函数隐式转换的结论。\n\n当我们没有重新定义toString与valueOf时，函数的隐式转换会调用默认的toString方法，它会将函数的定义内容作为字符串返回。而当我们主动定义了toString/vauleOf方法时，那么隐式转换的返回结果则由我们自己控制了。其中valueOf会比toString后执行\n\n因此上面例子的结论就很容易理解了。建议大家动手尝试一下。\n\n二、补充知识点之利用call/apply封数组的map方法\nmap(): 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n\n通俗来说，就是遍历数组的每一项元素，并且在map的第一个参数（回调函数）中进行运算处理后返回计算结果。返回一个由所有计算结果组成的新数组。\n\n// 回调函数中有三个参数\n// 第一个参数表示newArr的每一项，第二个参数表示该项在数组中的索引值\n// 第三个表示数组本身\n// 除此之外，回调函数中的this，当map不存在第二参数时，this指向丢失，当存在第二个参数时，指向改参数所设定的对象\nvar newArr = [1, 2, 3, 4].map(function(item, i, arr) {\n    console.log(item, i, arr, this);  // 可运行试试看\n    return item + 1;  // 每一项加1\n}, { a: 1 })\n\nconsole.log(newArr); // [2, 3, 4, 5]\n在上面例子的注释中详细阐述了map方法的细节。现在要面临一个难题，就是如何封装map。\n\n可以先想想for循环。我们可以使用for循环来实现一个map，但是在封装的时候，我们会考虑一些问题。我们在使用for循环的时候，一个循环过程确实很好封装，但是我们在for循环里面要对每一项做的事情却很难用一个固定的东西去把它封装起来。因为每一个场景，for循环里对数据的处理肯定都是不一样的。\n\n于是大家就想了一个很好的办法，将这些不一样的操作单独用一个函数来处理，让这个函数成为map方法的第一个参数，具体这个回调函数中会是什么样的操作，则由我们自己在使用时决定。因此，根据这个思路的封装实现如下。\n\nArray.prototype._map = function(fn, context) {\n    var temp = [];\n    if(typeof fn == \'function\') {\n        var k = 0;\n        var len = this.length;\n        // 封装for循环过程\n        for(; k < len; k++) {\n            // 将每一项的运算操作丢进fn里，利用call方法指定fn的this指向与具体参数\n            temp.push(fn.call(context, this[k], k, this))\n        }\n    } else {\n        console.error(\'TypeError: \'+ fn +\' is not a function.\');\n    }\n\n    // 返回每一项运算结果组成的新数组\n    return temp;\n}\n\nvar newArr = [1, 2, 3, 4]._map(function(item) {\n    return item + 1;\n})\n// [2, 3, 4, 5]\n在上面的封装中，我首先定义了一个空的temp数组，该数组用来存储最终的返回结果。在for循环中，每循环一次，就执行一次参数fn函数，fn的参数则使用call方法传入。\n\n在理解了map的封装过程之后，我们就能够明白为什么我们在使用map时，总是期望能够在第一个回调函数中有一个返回值了。在eslint的规则中，如果我们在使用map时没有设置一个返回值，就会被判定为错误。\n\nok，明白了函数的隐式转换规则与call/apply在这种场景的使用方式，我们就可以尝试通过简单的例子来了解一下柯里化了。\n\n三、由浅入深的柯里化\n在前端面试中有一个关于柯里化的面试题，流传甚广。\n\n实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) = 6\nadd(1, 2, 3)(4) = 10\nadd(1)(2)(3)(4)(5) = 15\n\n很明显，计算结果正是所有参数的和，add方法每运行一次，肯定返回了一个同样的函数，继续计算剩下的参数。\n\n我们可以从最简单的例子一步一步寻找解决方案。\n\n当我们只调用两次时，可以这样封装。\n\nfunction add(a) {\n    return function(b) {\n        return a + b;\n    }\n}\n\nconsole.log(add(1)(2));  // 3\n如果只调用三次：\n\nfunction add(a) {\n    return function(b) {\n        return function (c) {\n            return a + b + c;\n        }\n    }\n}\n\nconsole.log(add(1)(2)(3)); // 6\n上面的封装看上去跟我们想要的结果有点类似，但是参数的使用被限制得很死，因此并不是我们想要的最终结果，我们需要通用的封装。应该怎么办？总结一下上面2个例子，其实我们是利用闭包的特性，将所有的参数，集中到最后返回的函数里进行计算并返回结果。因此我们在封装时，主要的目的，就是将参数集中起来计算。\n\n来看看具体实现。\n\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = [].slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var adder = function () {\n        var _adder = function() {\n            [].push.apply(_args, [].slice.call(arguments));\n            return _adder;\n        };\n\n        // 利用隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n        _adder.toString = function () {\n            return _args.reduce(function (a, b) {\n                return a + b;\n            });\n        }\n\n        return _adder;\n    }\n    return adder.apply(null, [].slice.call(arguments));\n}\n\n// 输出结果，可自由组合的参数\nconsole.log(add(1, 2, 3, 4, 5));  // 15\nconsole.log(add(1, 2, 3, 4)(5));  // 15\nconsole.log(add(1)(2)(3)(4)(5));  // 15\n上面的实现，利用闭包的特性，主要目的是想通过一些巧妙的方法将所有的参数收集在一个数组里，并在最终隐式转换时将数组里的所有项加起来。因此我们在调用add方法的时候，参数就显得非常灵活。当然，也就很轻松的满足了我们的需求。\n\n那么读懂了上面的demo，然后我们再来看看柯里化的定义，相信大家就会更加容易理解了。\n\n柯里化（英语：Currying），又称为部分求值，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果。\n\n接收单一参数，因为要携带不少信息，因此常常以回调函数的理由来解决。\n将部分参数通过回调函数等方式传入函数中\n返回一个新函数，用于处理所有的想要传入的参数\n在上面的例子中，我们可以将add(1, 2, 3, 4)转换为add(1)(2)(3)(4)。这就是部分求值。每次传入的参数都只是我们想要传入的所有参数中的一部分。当然实际应用中，并不会常常这么复杂的去处理参数，很多时候也仅仅只是分成两部分而已。\n\n咱们再来一起思考一个与柯里化相关的问题。\n\n假如有一个计算要求，需要我们将数组里面的每一项用我们自己想要的字符给连起来。我们应该怎么做？想到使用join方法，就很简单。\n\nvar arr = [1, 2, 3, 4, 5];\n\n// 实际开发中并不建议直接给Array扩展新的方法\n// 只是用这种方式演示能够更加清晰一点\nArray.prototype.merge = function(chars) {\n    return this.join(chars);\n}\n\nvar string = arr.merge(\'-\')\n\nconsole.log(string);  // 1-2-3-4-5\n增加难度，将每一项加一个数后再连起来。那么这里就需要map来帮助我们对每一项进行特殊的运算处理，生成新的数组然后用字符连接起来了。实现如下：\n\nvar arr = [1, 2, 3, 4, 5];\n\nArray.prototype.merge = function(chars, number) {\n    return this.map(function(item) {\n        return item + number;\n    }).join(chars);\n}\n\nvar string = arr.merge(\'-\', 1);\n\nconsole.log(string); // 2-3-4-5-6\n但是如果我们又想要让数组每一项都减去一个数之后再连起来呢？当然和上面的加法操作一样的实现。\n\nvar arr = [1, 2, 3, 4, 5];\n\nArray.prototype.merge = function(chars, number) {\n    return this.map(function(item) {\n        return item - number;\n    }).join(chars);\n}\n\nvar string = arr.merge(\'~\', 1);\n\nconsole.log(string); // 0~1~2~3~4\n机智的小伙伴肯定发现困惑所在了。我们期望封装一个函数，能同时处理不同的运算过程，但是我们并不能使用一个固定的套路将对每一项的操作都封装起来。于是问题就变成了和封装map的时候所面临的问题一样了。我们可以借助柯里化来搞定。\n\n与map封装同样的道理，既然我们事先并不确定我们将要对每一项数据进行怎么样的处理，我只是知道我们需要将他们处理之后然后用字符连起来，所以不妨将处理内容保存在一个函数里。而仅仅固定封装连起来的这一部分需求。\n\n于是我们就有了以下的封装。\n\n// 封装很简单，一句话搞定\nArray.prototype.merge = function(fn, chars) {\n    return this.map(fn).join(chars);\n}\n\nvar arr = [1, 2, 3, 4];\n\n// 难点在于，在实际使用的时候，操作怎么来定义，利用闭包保存于传递num参数\nvar add = function(num) {\n    return function(item) {\n        return item + num;\n    }\n}\n\nvar red = function(num) {\n    return function(item) {\n        return item - num;\n    }\n}\n\n// 每一项加2后合并\nvar res1 = arr.merge(add(2), \'-\');\n\n// 每一项减2后合并\nvar res2 = arr.merge(red(1), \'-\');\n\n// 也可以直接使用回调函数，每一项乘2后合并\nvar res3 = arr.merge((function(num) {\n    return function(item) {\n        return item * num\n    }\n})(2), \'-\')\n\nconsole.log(res1); // 3-4-5-6\nconsole.log(res2); // 0-1-2-3\nconsole.log(res3); // 2-4-6-8\n大家能从上面的例子，发现柯里化的特征吗？\n\n四、柯里化通用式\n通用的柯里化写法其实比我们上边封装的add方法要简单许多。\n\nvar currying = function(fn) {\n    var args = [].slice.call(arguments, 1);\n\n    return function() {\n        // 主要还是收集所有需要的参数到一个数组中，便于统一计算\n        var _args = args.concat([].slice.call(arguments));\n        return fn.apply(null, _args);\n    }\n}\n\nvar sum = currying(function() {\n    var args = [].slice.call(arguments);\n    return args.reduce(function(a, b) {\n        return a + b;\n    })\n}, 10)\n\nconsole.log(sum(20, 10));  // 40\nconsole.log(sum(10, 5));   // 25\n五、柯里化与bind\nObject.prototype.bind = function(context) {\n    var _this = this;\n    var args = [].slice.call(arguments, 1);\n\n    return function() {\n        return _this.apply(context, args)\n    }\n}\n\n这个例子利用call与apply的灵活运用，实现了bind的功能。\n\n在前面的几个例子中，我们可以总结一下柯里化的特点：\n\n接收单一参数，将更多的参数通过回调函数来搞定？\n返回一个新函数，用于处理所有的想要传入的参数；\n需要利用call/apply与arguments对象收集参数；\n返回的这个函数正是用来处理收集起来的参数。\n希望大家读完之后都能够大概明白柯里化的概念，如果想要熟练使用它，就需要我们掌握更多的实际经验才行。\n\n','https://www.jianshu.com/p/5e1899fe7d6b','javascript','2018-11-12 17:36:56','Jason',NULL,'jason',1),(11,'How Technology Controls Your Life and What to Do About It','Zat Rana','In the 1960s, an eccentric and controversial professor predicted the rise of the internet.\n\nMarshall McLuhan spent most of his working life at the University of Toronto, where he was primarily focused on understanding culture and technology: what exactly they are, the way they interact, and how they have shaped what we experience as the past and the present.\n\nIn his renowned book Understanding Media: The Extensions of Man (as well as a prior effort called The Gutenberg Galaxy), he predicted that we would soon move away from a visual culture, dictated by technologies like the TV and print magazines, to electronic media.\n\nThis, he argued, would create a global village, a new kind of social organization that would move us away from individualism to tribalism as it would make it easier for us to connect.\n\nThe main reason McLuhan was able to make such an impressive prediction was that he had a very foundational understanding of what technology is and how humans use it.\n\nToday, we think of information technologies — like the phone or the computer — when we use the term. If we push the definition a little, perhaps ancient tools like the wheel and the ax fall in there, too. But as McLuhan once said in an interview, technology is more than that:\n\n“I think of technologies as extensions of our own bodies, of our own faculties, whether they be clothing, housing, or familiar kinds of technologies like wheels, stirrups that extend the function of the body — the kind to amplify human powers in order to cope with the various environments brings on these extensions. These amplifications of our powers, sort of deifications of man, I think of as technologies.”\nThe Point of Personal Technology\nWhile McLuhan sometimes took a pessimistic view regarding how technologies adapt the human condition, he was mostly impartial, often suggesting that technology is generally agnostic. If you are literate and use it well, it’s leverage; if you don’t, then it controls you.\n\nWhen we think of the term cyborg, we think of science fiction movies where humans have merged with computers in a physical way. But according to McLuhan’s definition, we’ve been cyborgs ever since we learned to make fire and build tools and dress ourselves in clothes.\n\nEach of these technologies, just like the computer, in some way, augment a part of our body and its senses so that we can better navigate across the different zones of space and time.\n\nWhen you build a car and use it in your daily life, you replace part of the functionality of your legs, not needing to use them for longer distances that you once may have had to.\n\nIn this way, the car, then, becomes a part of your body, or an extension of your body, one that provides seamless leverage as you then conquer more space than you previously could.\n\nThis definition of technology turns everything that we unthinkingly use daily into something that either provides leverage as we connect it to our body or something that hinders us.\n\nIf you spend all day sitting in front of the computer, being nudged from one notification to another, as your life passes by, this extension, in this instance, is likely hindering your body.\n\nAt the same time, however, the fact that you can use that same computer to send emails to loved ones, communicating across vast distances, in minutes, gives you immense leverage to manipulate the very fabric of spacetime in a way that your biological body alone can’t.\n\nThis same dynamic exists in our relationship to our clothes, our bed, our home, and whatever else we can think of that provides a function to our body without being the body.\n\nA Way Towards Maximum Utility\nOne of the most inspired cultural trends in recent years is minimalism: the idea that less ownership is more because most of what we own today isn’t necessary in a strict sense.\n\nAt the end of the day, if you take care of the basics, like feeding yourself, putting a roof over your head, and finding ways to add value with your time, you technically don’t need more.\n\nThis whole idea gets one thing quite right, but at the same time, in another way, it falls short.\n\nFirst, it’s true: we don’t need a lot. In fact, much of what most people own is in their way. If we look at it from McLuhan’s point of view, these things act more like the computer stopping you from living your life than the computer that lets you connect with your loved ones.\n\nOn the other hand, however, if ownership is pursued with intent, where utility is valued and where technology extends the body in a way that adds leverage, then it has a lot to offer.\n\nThis kind of thinking requires a person to evaluate their actual relationship, the source of their connection, to the technologies they own and interact with. What is the meaning they gain from something? (This also applies to apps or websites within each technology.)\n\nA good way to evaluate utility is to see if a thing seamlessly and fluidly interacts with your body to give you more control over your surroundings, rather than them controlling you.\n\nA car, for example, very easily gets you to where you want to go better than having to walk there. It’s a seamless and fluid interaction, and in most cases, it doesn’t rule your life.\n\nSocial media, however, is built to nudge your brain in ways that create habit-forming behaviors. And rather than the body ruling it, in many cases, it rules the body and your life.\n\nHumans create meaning from connection. And we implicitly go through life attaching meanings we aren’t even aware of to different technologies, from clothes to phones.\n\nMaximizing utility is about unmasking meaning to see if it adds the value we assume it does.\n\nThe Takeaway\nOne of Marshall McLuhan’s most enduring phrases is: “The medium is the message.”\n\nGiven the state of technologies today, the medium that you use to consume your content (whether that be news or some other utility you gain from a technology) shapes more of what you take away and understand than the actual content that you are consuming.\n\nThere is a difference between getting your news from an old-fashioned newspaper, which is a very individual act, than there is getting your news from a website, which is a tribal act.\n\nThe reason is that technologies become a part of our bodies, and this symbiotic relationship serves a certain function, which transcends whatever surface-level relationship we assume.\n\nToday, we are increasingly being ruled by our technologies rather than the other way around. Part of this has to do with how we have been creating technologies in recent decades, but another part is that we simply aren’t literate enough to manage our relationship.\n\nAny technology, from clothing to a computer, either augments the body in a beneficial way, or it hinders the body in a way that decouples its intention from that of the mind.\n\nIf you do the work to evaluate your relationships with the different technologies in your life, and the different purposes they serve, you can maximize the utility you gain from them.\n\nMuch of the meaning in life emerges out of the connections we form to the technologies that extend our bodies. To better nourish this meaning, we have to better understand them.','https://medium.com/personal-growth/how-to-develop-a-healthier-relationship-to-technology-6b2e22aab54','others','2018-11-13 10:27:42','Jason',NULL,'jason',1),(14,'5 Things to Do When You Have Too Many Ideas and Never Finish Anything','Mayo Oshin','<p><span style=\"background-color: initial;\"><img src=\"https://mayooshin.com/wp-content/uploads/2018/08/juggling.jpg-710x675.jpg\" alt=\"5 Things to Do When You Have Too Many Ideas and Never Finish Anything.\" height=\"675\" width=\"1080\"></span></p><p>What do you do when you’re overwhelmed with too many ideas? Do you abandon them, or do you finish what you start?</p><p>Juggling multiple ideas and goals—to write, exercise, read more, wake up early and so on—is a tough gig that often begins with excitement, but ends with procrastination, and failure to finish any one of the ideas we started.</p><p>Here are 5 different things to do when you’re overwhelmed with too many ideas and goals.</p><h2><strong style=\"background-color: initial;\">Why Do We Fail To Follow Through on Our Ideas?</strong></h2><blockquote><em>“I have too many ideas for a lifetime.”</em></blockquote><blockquote><em>-Taylor Wilson</em></blockquote><p>In 2003, Sheena Iyengar, Psychologist and Professor at Columbia Business School, conducted an 800,000 employee strong study, to investigate the effects that adding more investment choices had on their participation in retirement saving plans. [1]</p><p>At the end of the study period, the researchers gathered the data and plotted the results to answer the question:&nbsp;<em style=\"background-color: initial;\">would more employees participate in retirement saving plans, if more investment choices were made available to them?</em></p><p>As we’d predict, the answer is yes. Afterall, more choice is better. And so, this would be the researchers conclusion.</p><p>Or, was it?</p><p><a href=\"https://mayooshin.com/wp-content/uploads/2018/08/word-image-1-e1534765346141.png\" target=\"_blank\" style=\"color: rgb(226, 79, 49); background-color: initial;\"><img src=\"https://mayooshin.com/wp-content/uploads/2018/08/word-image-1-e1534765346141-1024x708.png\" height=\"708\" width=\"1024\"></a></p><p>The researchers discovered that adding more investment choices,&nbsp;<em style=\"background-color: initial;\">reduced</em>&nbsp;the likelihood that employees would participate in retirement saving plans.</p><p>As per the diagram above, for every 10 funds added to the array of options, the rate of participation drops by 2 percent. In fact, for those employees who chose to invest, adding more investment choices increased the chances that employees would invest in more conservative funds.</p><p>This is the paradox of choice. More choice often leads to less action. The more ideas and goals we pursue, the less likely we’ll follow through on any one of them. And vice versa.</p><p>There are other explanations for&nbsp;<a href=\"https://mayooshin.com/akrasia/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">why we fail to finish what we start.</a>&nbsp;Lack of time, fear of failure, overwhelm from multiple choices that drain energy and a decline of excitement after starting a new project, can lead to chronic procrastination. When&nbsp;<a href=\"https://mayooshin.com/physics-stressfree-productivity/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">we get stuck in motion at rest, instead of motion in action</a>, our time and energy are wasted on efforts that produce little results.</p><p>Here are five different ways to avoid overwhelm, get started and follow through on your ideas.</p><h2><strong style=\"background-color: initial;\">5 Ways to Overcome Too Many Ideas Syndrome</strong></h2><p><strong style=\"background-color: initial;\">1. Create mini-deadlines.</strong></p><p>The more time it takes to complete a task, the greater the likelihood that we fall victim to ‘Parkinson’s Law,’ which states that, work expands to fill the time available for its completion.</p><p>For example, if you have one week to complete a three-hour task, according to Parkinson’s law, the task will increase in complexity and keep dragging on for the duration of the week. The best way to combat this problem, is to&nbsp;<a href=\"https://mayooshin.com/how-to-stop-procrastinating-2-minute-rule/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">create mini-deadlines</a>that force you to finish tasks within a short time frame.</p><p><strong style=\"background-color: initial;\">Action:</strong>&nbsp;Create a list of your daily tasks and note approximately, how much time it takes to complete each one of them. Then, cut the time limit of each task in half. Aim to finish each task by these deadlines.</p><p><strong style=\"background-color: initial;\">2. Use the 80/20 rule.</strong></p><p>In layman’s terms, the 80/20 rule suggests that twenty percent of the what you do contributes to eighty percent of the results you get. In other words, each task can be broken down into activities that either fall into the twenty or eighty percent group.</p><p>For example, if your goal is to exercise more and lose weight, there are some exercises—the twenty percent, like high intensity sprints—that will significantly contribute to weight loss, more so than others—the eighty percent, like stretching.</p><p>The key is to experiment, discover and focus your time and energy on the twenty percent activities, that yield the greatest returns. This way, you can get more done by doing less—and in less time.</p><p><strong style=\"background-color: initial;\">3. Trust your gut.</strong></p><p>Often, we hesitate to get started and take action on ideas, because of the fear of failure, rejection and self-doubt. Countless hours are spent researching and planning to take action, but when it comes time to jump ship, we stay on the boat and fail to follow through on our plans.</p><p>In the book&nbsp;<a href=\"http://geni.us/gladwellblinkbook\" target=\"_blank\" style=\"color: rgb(226, 79, 49); background-color: initial;\"><em>Blink:&nbsp;The Power of Thinking Without Thinking</em></a><a href=\"http://geni.us/gladwellblinkbook\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">&nbsp;</a><a href=\"http://geni.us/gladwellblinkaudio\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">(audiobook)</a><em style=\"background-color: initial;\">,&nbsp;</em>world-renowned journalist and author, Malcolm Gladwell, makes a strong case that, often, snap judgements made within seconds, lead to better decisions than a more cautious, thoroughly planned approach.</p><p>Next time you’re not sure of what to do next or how to do it, trust your gut instinct and take action on the first thought that crosses your mind, because more times than not, you’ll probably be on the right track.</p><p><strong style=\"background-color: initial;\">4. Develop the habit of finishing.</strong></p><p>Many people have mastered the art of&nbsp;<em style=\"background-color: initial;\">starting,&nbsp;</em>but few have built the habit of&nbsp;<em style=\"background-color: initial;\">finishing.&nbsp;</em>Starting is easier than finishing, but the bulk of the results we seek, lie at the finish line.</p><p>The process of building the habit of&nbsp;<em style=\"background-color: initial;\">finishing,&nbsp;</em>is just like any other habit. First, you&nbsp;<a href=\"https://mayooshin.com/build-new-habit-guide/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">start small</a>&nbsp;and build up, with a reasonable expectation of&nbsp;<a href=\"https://mayooshin.com/new-habit/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">how long it will take to form a habit.</a></p><p>Then, you can make&nbsp;<a href=\"https://mayooshin.com/environment-shapes-life/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">small changes to your environment</a>&nbsp;to make it easier to finish whatever you set out to do.</p><p><strong style=\"background-color: initial;\">5. Practice Quitting.</strong></p><p>Contrary to popular opinion, the most productive, successful people, quit on their goals all the time—they just know what to quit and when to do so.</p><p><a href=\"https://mayooshin.com/the-upside-of-quitting-why-quitters-always-win-and-losers-never-quit/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">The upside of quitting&nbsp;</a>is that you redirect time and energy wasted on an unfruitful idea or goal, towards another more rewarding venture.</p><p>Here’s a quick inventory check. If the costs of pursuing an idea has outweighed the benefits—over a period of time—perhaps it’s time to consider cutting your losses. Although it may hurt at first, down the line, you’ll free up more time to focus on better ideas.</p><h2><strong style=\"background-color: initial;\">Finish What You Start</strong></h2><p>Whilst it can be exciting to start new ideas and goals, if we don’t finish what we start, valuable time and energy—that can’t be recovered—will go to waste.</p><p>Falling in love with&nbsp;<em style=\"background-color: initial;\">starting</em>&nbsp;is easy. Falling in love with&nbsp;<em style=\"background-color: initial;\">finishing</em>&nbsp;is hard. But, if you can learn to fall in love with the art of&nbsp;<em style=\"background-color: initial;\">finishing</em>—and the process of overcoming adversity, failures and working around obstacles—you’ll consistently follow through on your ideas.</p><p><strong style=\"background-color: initial;\">P.S.&nbsp;</strong>If you’d like to learn practical strategies to help you master the art of focus, eliminate distractions, shave up to 10 hours off your workweek and get important things done, check out&nbsp;<a href=\"https://mayooshin.com/the-art-of-stress-free-focus-seminar/\" target=\"_blank\" style=\"color: rgb(226, 79, 49);\">The Art of Stress-Free Focus Seminar</a>.</p><p><br></p>','https://mayooshin.com/5-things-to-do-too-many-ideas/','others','2018-11-14 11:57:55','Jason',NULL,'jason',6),(15,'The Two Types of Knowledge (or How to Be Smart)','Zat Rana','Although the paper that introduced the theory of evolution to the world was published in 1858, Charles Darwin first conceived of the idea in 1838.\n\nHe had spent five years on the HMS Beagle as a geologist when he noticed something peculiar in his records: the geological distribution of fossils and wildlife showed a pattern of change between different species.\n\nAt the time, the controversial predecessor to Darwin’s theory was transmutation, which rightly suggested that one species changes into another, but which wrongly assumed that this occurs due to some spontaneous life-force, or laws that kick into play at different predetermined times by God, or some other mysterious but unidentified process.\n\nCritics saw it as a feeble attempt at the materialization of life, an idea that had taken hold of the world ever since the Enlightenment, without any compelling evidence to support its radical claim.\n\nThat initial paper published by Darwin (along with Alfred Russel Wallace, who had come to similar conclusions), however, was strong where transmutation was weak: it gave a specific process for this change.\n\nIn any population of a species, we have variation in phenotype (observable characteristics), arising from mutations that occurs in the genome and from the epigenetic changes that occur during life, and the result is that different individuals in a group of organisms show differences in their ability to adapt to their environment — some do well and survive; others don’t.\n\nThis simple process of variation and selection explains how a common ancestor produces the diversity of life we observe in the biosphere.\n\nIn this way, life is — as Jonas Salk, the famed medical researcher put it — “an error-making and error-correcting process.” It gives us many attempts at overcoming the challenges of any environment by introducing variation, and it then selects the correct answer by eliminating what doesn’t work.\n\nUseful knowledge survives and gets passed down to newer generations, who can then use this knowledge to enhance their effectiveness. But this, however, isn’t the only kind of knowledge available to us.\n\nExperimentation and Refinement\nThe actual process of learning (or getting smarter) extends beyond our predetermined genome, but evolution has set a precedent in form.\n\nEven the learning we do in the world follows a variation and selection (via elimination) pattern. We try lots of different things, we see what works, and then based on the results, we eliminate the competing options, selecting for the skills that will be most useful in the future, too.\n\nCognitive neuroscience has a theory of mind (called predictive processing) that suggests that the human brain is a prediction engine, which consistently creates our perception of the world based on our past interactions within similar environments.\n\nIn the beginning, when you are young, there isn’t much information to go off of, so you get mostly unconstrained inputs from the external world into your brain, but as you get older, you start to filter through this variety for usefulness, making better distinctions.\n\nYou create mental concepts in your mind about what is important and what is not, and then these concepts shape your future perceptions by using the already-selected knowledge to further select knowledge.\n\nThis entire process is mostly intuitive, and what keeps it updating is pain/pleasure, which tells your body that a certain perception and your corresponding reaction should either be reinforced or not. But some forms of experience on the pain/pleasure axis like surprise and awe can be used to intentionally tell your mind that something unexpected was experienced, too, encouraging you to consciously readjust the conceptual model.\n\nWhether you are learning to play a sport or simply trying to create a more accurate mental model of reality in your mind, you are working with a variety of experiences, and within those experiences, you have to choose and reinforce the ones that are the most useful to you.\n\nIn this way, everything that you do is essentially an experiment that gets refined and corrected with experience and practice.\n\nThe difference between you and, say, a professional tennis player is almost certainly that they have a genome that makes them more suitable to play their sport, but more importantly, they have intuitive knowledge embedded in their brain from all of the predictive processing they have done, in a very specific environment, to refine their sense for what works and what doesn’t.\n\nThe same can be said for great artists and scientists, entrepreneurs and investors, and other everyday folks who do what they do well.\n\nOur brain is a prediction engine that builds knowledge and gets smarter as it better aligns what it needs to do with the demands of the environment.\n\nConjectures and Their Refutation\nPredictive processing alone likely isn’t what makes humans unique. If it really is the process by which we make sense of the world, the chances are that some form of it appears in other animals in nature, too.\n\nWhat takes humans one step beyond this simple empirical knowledge-building is that we can think in abstract concepts, with a complex language, and then share this knowledge between us within culture.\n\nThe best formal system that we have ever devised for this is the scientific method, which operates based on a combination of asking questions, formulating hypotheses, and then testing those hypotheses based on the data collected from our experiments and observations.\n\nIn the same way that we have variation and selection in evolution (and in our empirical mental modeling), the philosopher of science Karl Popper suggested that we have it in scientific inquiry, too, where we start by formulating a conjecture based on incomplete information (a theory), and we improve on our conjectures by refuting them.\n\nScience, in this way, can never be completely certain of anything but it can only get more and more correct as we refute bad conjectures and replace them with better ones and so on. And in order for something to be considered a scientific theory, it has to be capable of being proven wrong.\n\nWe don’t need to just rely on our mind updating itself by putting it in different environments to gain knowledge; we can also make use of the abstract knowledge we collectively build in culture.\n\nWhereas personal experimentation and refinement can improve a brain by directly building its intuitive understanding, abstract theories (based on evidence) can do the same thing without us needing to go through the same process that someone else did to collect that knowledge.\n\nThere is, of course, some important practical knowledge that is lost in the translation from the abstract to the concrete, just like empirical knowledge (from predictive processing) lacks the rigor that comes with having a scientific community constantly challenging you, but both are capable of adapting our minds in a way that is more useful to us.\n\nBy updating our mental model, good conjectures, based on strong collective evidence, can make our predictions of reality more accurate.\n\nThe Takeaway\nKnowledge, whether implicit or explicit, underlies everything that we do.\n\nBy virtue of evolution, much of this knowledge is encoded in our genome, which programs us before we are born. It has been selected based on generations and generations of efforts to survive, implanting us with a general template of a phenotype that is best suited for our environment.\n\nIn the 21st century, however, as our environment continues to change at an exponential rate, the knowledge encoded in our genome is becoming less and less sufficient for our attempts at making sense of the world.\n\nFortunately, evolution has also programmed us with the ability to learn. With a mind that experiments, predicts, and corrects, we can build empirical knowledge to adapt us to other relevant environments.\n\nWe can use our pain/pleasure axis and the affect that we experience as surprise/awe to self-correct into building an intuitive understanding of the world that allows us to master our surroundings and their demands.\n\nTo further augment this intuitive understanding, we can also stand on the shoulders of the giants that have come before us in culture by using their theories and evidence to further sharpen our mental model of reality.\n\nThere are many ways to define intelligence, and different definitions cater to different expectations, but ultimately, it’s about how effectively an agent can make sense of and navigate its environment.\n\nKnowledge and its application is the process that we build everything else on, and it starts with what we do to feed it.\n','https://medium.com/personal-growth/the-two-types-of-knowledge-or-how-to-be-smart-b06403c6858b','others','2018-11-16 11:10:31','Jason',NULL,'jason',0),(16,'看看这些被同事喷的JS代码风格你写过多少','殷荣桧','  现在写代码比以前好多了，代码的格式都有eslint,prettier,babel(写新版语法)这些来保证，然而，技术手段再高端都不能解决代码可读性（代码能否被未来的自己和同事看懂）的问题，因为这个问题只有人自己才能解决。我们写代码要写到下图中左边这样基本上就功德圆满了。\n\n注：由于个人水平与眼界的原因，这篇文章中并没有完全覆盖到常见的写代码的不好的习惯，所以你如果觉的有需要补充的，都可以在文章下方评论，或者直接到我的Github的这篇文章中评论。对于有用的，都将补充到我的掘金和Github中去。同时，你如果觉的文章写得还可以，Please在我的Github中送上你宝贵的Star，你的Star是我继续写文章最大的动力。\n\n\n一、变量相关\n（1）变量数量的定义\nNO：滥用变量:\nlet kpi = 4;  // 定义好了之后再也没用过\nfunction example() {\n	var a = 1;\n	var b = 2;\n	var c = a+b;\n	var d = c+1;\n	var e = d+a;\n	return e;\n}\n复制代码\nYES: 数据只使用一次或不使用就无需装到变量中\nlet kpi = 4;  // 没用的就删除掉，不然过三个月自己都不敢删，怕是不是那用到了\nfunction example() {\n	var a = 1;\n	var b = 2;\n	return 2a+b+1;\n}\n复制代码\n(2)变量的命名\nNO：自我感觉良好的缩写\nlet fName = \'jackie\'; // 看起来命名挺规范，缩写，驼峰法都用上，ESlint各种检测规范的工具都通过，But，fName是啥？这时候，你是不是想说What are you 弄啥呢？\nlet lName = \'willen\'; // 这个问题和上面的一样\n复制代码\nYES：无需对每个变量都写注释，从名字上就看懂\n  let firstName = \'jackie\'; // 怎么样，是不是一目了然。少被喷了一次\n  let lastName = \'willen\';\n复制代码\n（3)特定的变量\nNO：无说明的参数\nif (value.length < 8) { // 为什么要小于8，8表示啥？长度，还是位移，还是高度？Oh,my God!!\n	....\n}\n复制代码\nYES：添加变量\nconst MAX_INPUT_LENGTH = 8;\nif (value.length < MAX_INPUT_LENGTH) { // 一目了然，不能超过最大输入长度\n	....\n}\n复制代码\n（4）变量的命名\nNO：命名过于啰嗦\nlet nameString;\nlet theUsers;\n复制代码\nYES： 做到简洁明了\nlet name;\nlet users;\n复制代码\n（5）使用说明性的变量(即有意义的变量名)\nNO：长代码不知道啥意思\nconst address = \'One Infinite Loop, Cupertino 95014\';\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityZipCode(\n  address.match(cityZipCodeRegex)[1], // 这个公式到底要干嘛，对不起，原作者已经离职了。自己看代码\n  address.match(cityZipCodeRegex)[2], // 这个公式到底要干嘛，对不起，原作者已经离职了。自己看代码\n);\n复制代码\nYES：用变量名来解释长代码的含义\nconst address = \'One Infinite Loop, Cupertino 95014\';\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nconst [, city, zipCode] = address.match(cityZipCodeRegex) || [];\nsaveCityZipCode(city, zipCode);\n复制代码\n（6）避免使用太多的全局变量\nNO：在不同的文件不停的定义全局变量\nname.js\nwindow.name = \'a\';\nhello.js\nwindow.name = \'b\';\ntime.js\nwindow.name = \'c\';  //三个文件的先后加载顺序不同，都会使得window.name的值不同，同时，你对window.name的修改了都有可能不生效，因为你不知道你修改过之后别人是不是又在别的说明文件中对其的值重置了。所以随着文件的增多，会导致一团乱麻。\n复制代码\nYES：少用或使用替代方案\n你可以选择只用局部变量。通过(){}的方法。\n如果你确实用很多的全局变量需要共享，你可以使用vuex,redux或者你自己参考flux模式写一个也行。\n复制代码\n(7) 变量的赋值。\nNO：对于求值获取的变量，没有兜底。\nconst MIN_NAME_LENGTH = 8;\nlet lastName = fullName[1];\nif(lastName.length > MIN_NAME_LENGTH) { // 这样你就给你的代码成功的埋了一个坑，你有考虑过如果fullName = [\'jackie\']这样的情况吗？这样程序一跑起来就爆炸。要不你试试。\n    ....\n}\n复制代码\nYES：对于求值变量，做好兜底。\nconst MIN_NAME_LENGTH = 8;\nlet lastName = fullName[1] || \'\'; // 做好兜底，fullName[1]中取不到的时候，不至于赋值个undefined,至少还有个空字符，从根本上讲，lastName的变量类型还是String，String原型链上的特性都能使用，不会报错。不会变成undefined。\nif(lastName.length > MIN_NAME_LENGTH) {\n    ....\n}\n其实在项目中有很多求值变量，对于每个求值变量都需要做好兜底。\nlet propertyValue = Object.attr || 0; // 因为Object.attr有可能为空，所以需要兜底。\n但是，赋值变量就不需要兜底了。\nlet a = 2; // 因为有底了，所以不要兜着。\nlet myName = \'Tiny\'; // 因为有底了，所以不要兜着。\n复制代码\n二、函数相关\n（1）函数命名\nNO：从命名无法知道返回值类型\nfunction showFriendsList() {....} // 现在问，你知道这个返回的是一个数组，还是一个对象，还是true or false。你能答的上来否？你能答得上来我请你吃松鹤楼的满汉全席还请你不要当真。\n复制代码\nYes: 对于返回true or false的函数，最好以should/is/can/has开头\nfunction shouldShowFriendsList() {...}\nfunction isEmpty() {...}\nfunction canCreateDocuments() {...}\nfunction hasLicense() {...}\n复制代码\n(2) 功能函数最好为纯函数\nNO: 不要让功能函数的输出变化无常。\nfunction plusAbc(a, b, c) {  // 这个函数的输出将变化无常，因为api返回的值一旦改变，同样输入函数的a，b,c的值，但函数返回的结果却不一定相同。\n		var c = fetch(\'../api\');\n		return a+b+c;\n}\n复制代码\nYES：功能函数使用纯函数，输入一致，输出结果永远唯一\nfunction plusAbc(a, b, c) {  // 同样输入函数的a，b,c的值，但函数返回的结果永远相同。\n		return a+b+c;\n}\n复制代码\n（3）函数传参\nNO：传参无说明\npage.getSVG(api, true, false); // true和false啥意思，一目不了然\n复制代码\nYES: 传参有说明\npage.getSVG({\n	imageApi: api,\n	includePageBackground: true, // 一目了然，知道这些true和false是啥意思\n	compress: false,\n})\n复制代码\n（4）动作函数要以动词开头\nNO: 无法辨别函数意图\nfunction emlU(user) {\n	....\n}\n复制代码\nYES：动词开头，函数意图就很明显\nfunction sendEmailToUser(user) {\n    ....\n}\n复制代码\n（5）一个函数完成一个独立的功能，不要一个函数混杂多个功能\n这是软件工程中最重要的一条规则，当函数需要做更多的事情时，它们将会更难进行编写、测试、理解和组合。当你能将一个函数抽离出只完成一个动作，他们将能够很容易的进行重构并且你的代码将会更容易阅读。如果你严格遵守本条规则，你将会领先于许多开发者。\nNO：函数功能混乱，一个函数包含多个功能。最后就像能以一当百的老师傅一样，被乱拳打死（乱拳（功能复杂函数）打死老师傅（老程序员））\nfunction sendEmailToClients(clients) {\n  clients.forEach(client => {\n    const clientRecord = database.lookup(client)\n    if (clientRecord.isActive()) {\n      email(client)\n    }\n  })\n}\n复制代码\nYES： 功能拆解,\nfunction sendEmailToActiveClients(clients) {  //各个击破，易于维护和复用\n  clients.filter(isActiveClient).forEach(email)\n}\n\nfunction isActiveClient(client) {\n  const clientRecord = database.lookup(client)\n  return clientRecord.isActive()\n}\n复制代码\n（6）优先使用命令式编程\nNO: 使用for循环编程\nfor(i = 1; i <= 10; i++) { // 一看到for循环让人顿生不想看的情愫\n   a[i] = a[i] +1;\n}\n复制代码\nYES：使用命令式编程\nlet b = a.map(item => ++item) // 怎么样，是不是很好理解，就是把a的值每项加一赋值给b就可以了。现在在javascript中几乎所有的for循环都可以被map,filter,find,some,any,forEach等命令式编成取代。\n复制代码\n(7) 函数中过多的采用if else ..\nNo： if else过多\nif (a === 1) {\n	...\n} else if (a ===2) {\n	...\n} else if (a === 3) {\n	...\n} else {\n   ...\n}\n复制代码\nYES: 可以使用switch替代或用数组替代\nswitch(a) {\n   case 1:\n   	    ....\n   case 2:\n   		....\n   case 3:\n   		....\n  default:\n   	....\n}\nOr\nlet handler = {\n    1: () => {....},\n    2: () => {....}.\n    3: () => {....},\n    default: () => {....}\n}\n\nhandler[a]() || handler[\'default\']()\n复制代码\n三、尽量使用ES6，有可以能的话ES7中新语法（只罗列最常用的新语法，说实话，有些新语法不怎么常用）\n（1）尽量使用箭头函数\nNO：采用传统函数\nfunction foo() {\n  // code\n}\n复制代码\nYES：使用箭头函数\nlet foo = () => {\n  // code\n}\n复制代码\n（2）连接字符串\nNO：采用传统+号\nvar message = \'Hello \' + name + \', it\\\'s \' + time + \' now\'\n复制代码\nYES：采用模板字符\nvar message = `Hello ${name}, it\'s ${time} now`\n复制代码\n(3) 使用解构赋值\nNO：使用传统赋值：\nvar data = { name: \'dys\', age: 1 };\nvar name = data.name;\nvar age = data.age;\n\nvar fullName = [\'jackie\', \'willen\'];\nvar firstName = fullName[0];\nvar lastName = fullName[1];\n复制代码\nYES：使用结构赋值：\nconst data = {name:\'dys\', age:1};\nconst {name, age} = data;   // 怎么样，是不是简单明了\n\nvar fullName = [\'jackie\', \'willen\'];\nconst [firstName, lastName] = fullName;\n复制代码\n（4） 尽量使用类class\nNO: 采用传统的函数原型链实现继承\n典型的 ES5 的类(function)在继承、构造和方法定义方面可读性较差，当需要继承时，优先选用 class。代码太多，就省略了。\n复制代码\nYES：采用ES6类实现继承\nclass Animal {\n  constructor(age) {\n    this.age = age\n  }\n\n  move() {\n    /* ... */\n  }\n}\n\nclass Mammal extends Animal {\n  constructor(age, furColor) {\n    super(age)\n    this.furColor = furColor\n  }\n\n  liveBirth() {\n    /* ... */\n  }\n}\n\nclass Human extends Mammal {\n  constructor(age, furColor, languageSpoken) {\n    super(age, furColor)\n    this.languageSpoken = languageSpoken\n  }\n\n  speak() {\n    /* ... */\n  }\n}\n复制代码\n\n  先写到这了，这是目前为止发现的问题，这篇文章中并没有完全覆盖到常见的写代码的不好的习惯，所以你如果觉的有需要补充的，都可以在文章下方评论，或者直接到我的Github的这篇文章中评论。对于有用的，都将补充到我的掘金和Github中去。同时，你如果觉的文章写得还可以，Please在我的Github中送上你宝贵的Star，你的Star是我继续写文章最大的动力。\n','https://juejin.im/post/5becf928f265da61380ec986','javascript','2018-11-17 15:27:42','Jason',NULL,'jason',1),(19,'前端基础进阶（七）：函数与函数式编程','这波能反杀','<p>纵观JavaScript中所有必须需要掌握的重点知识中，函数是我们在初学的时候最容易忽视的一个知识点。在学习的过程中，可能会有很多人、很多文章告诉你面向对象很重要，原型很重要，可是却很少有人告诉你，面向对象中所有的重点难点，几乎都与函数息息相关。</p><p>包括我之前几篇文章介绍的执行上下文，变量对象，闭包，this等，都是围绕函数的细节来展开。</p><p>我知道很多人在学习中，很急切的希望自己快一点开始学习面向对象，学习模块，学习流行框架，然后迅速成为高手。但是我可以很负责的告诉你，关于函数的这些基础东西没理解到一定程度，那么你的学习进展一定是举步维艰的。</p><p>所以，大家一定要重视函数！</p><p>当然，关于函数的重点，难点在前面几篇文章都已经说得差不多了，这篇文章主要总结一下函数的基础知识，并初步学习函数式编程的思维。</p><h5>一、函数声明、函数表达式、匿名函数与自执行函数</h5><p>关于函数在实际开发中的应用，大体可以总结为函数声明、函数表达式、匿名函数、自执行函数。</p><p><strong>函数声明</strong></p><p>我们知道，JavaScript中，有两种声明方式，一个是使用<code>var</code>的变量声明，另一个是使用<code>function</code>的函数声明。</p><p>在<a href=\"https://www.jianshu.com/p/330b1505e41d\" target=\"_blank\">前端基础进阶（三）：变量对象详解</a>中我有提到过，变量对象的创建过程中，函数声明比变量声明具有更为优先的执行顺序，即我们常常提到的函数声明提前。因此我们在执行上下文中，无论在什么位置声明了函数，我们都可以在同一个执行上下文中直接使用该函数。</p><pre class=\"ql-syntax\" spellcheck=\"false\">fn();  // function\n\nfunction fn() {\n    console.log(\'function\');\n}\n</pre><p>** 函数表达式 **</p><p>与函数声明不同，函数表达式使用了var进行声明，那么我们在确认他是否可以正确使用的时候就必须依照var的规则进行判断，即变量声明。我们知道使用var进行变量声明，其实是进行了两步操作。</p><pre class=\"ql-syntax\" spellcheck=\"false\">// 变量声明\nvar a = 20;\n\n// 实际执行顺序\nvar a = undefined;  // 变量声明，初始值undefined，变量提升，提升顺序次于function声明\na = 20;  // 变量赋值，该操作不会提升\n</pre><p>同样的道理，当我们使用变量声明的方式来声明函数时，就是我们常常说的函数表达式。函数表达的提升方式与变量声明一致。</p><pre class=\"ql-syntax\" spellcheck=\"false\">fn(); // 报错\nvar fn = function() {\n    console.log(\'function\');\n}\n</pre><p>上例子的执行顺序为：</p><pre class=\"ql-syntax\" spellcheck=\"false\">var fn = undefined;   // 变量声明提升\nfn();    // 执行报错\nfn = function() {   // 赋值操作，此时将后边函数的引用赋值给fn\n    console.log(\'function\');\n}\n</pre><blockquote>因此，由于声明方式的不同，导致了函数声明与函数表达式在使用上的一些差异需要我们注意，除此之外，这两种形式的函数在使用上并无不同。</blockquote><p>关于上面例子中，函数表达式中的赋值操作，在其他一些地方也会被经常使用，我们清楚其中的关系即可。</p><pre class=\"ql-syntax\" spellcheck=\"false\">在构造函数中添加方法\nfunction Person(name) {\n    this.name = name;\n    this.age = age;\n    // 在构造函数内部中添加方法\n    this.getAge = function() {\n        return this.age;\n    }\n    this.\n}\n// 给原型添加方法\nPerson.prototype.getName = function() {\n    return this.name;\n}\n\n// 在对象中添加方法\nvar a = {\n    m: 20,\n    getM: function() {\n        return this.m;\n    }\n}\n\n</pre><p><strong>匿名函数</strong></p><p>在上面我们大概讲述了函数表达式中的赋值操作。而匿名函数，顾名思义，就是指的没有被显示进行赋值操作的函数。它的使用场景，多作为一个参数传入另一个函数中。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var a = 10;\nvar fn = function(bar, num) {\n    return bar() + num;\n}\n\nfn(function() {\n    return a;\n}, 20)\n</pre><p>在上面的例子中，fn的第一个参数传入了一个匿名函数。虽然该匿名函数没有显示的进行赋值操作，我们没有办法在外部执行上下文中引用到它，但是在fn函数内部，我们将该匿名函数赋值给了变量bar，保存在了fn变量对象的arguments对象中。</p><pre class=\"ql-syntax\" spellcheck=\"false\">// 变量对象在fn上下文执行过程中的创建阶段\nVO(fn) = {\n    arguments: {\n        bar: undefined,\n        num: undefined,\n        length: 2\n    }\n}\n\n// 变量对象在fn上下文执行过程中的执行阶段\n// 变量对象变为活动对象，并完成赋值操作与执行可执行代码\nVO -&gt; AO\n\nAO(fn) = {\n    arguments: {\n        bar: function() { return a },\n        num: 20,\n        length: 2\n    }\n}\n</pre><p>由于匿名函数传入另一个函数之后，最终会在另一个函数中执行，因此我们也常常称这个匿名函数为<strong>回调函数</strong>。关于匿名函数更多的内容，我会在下一篇深入探讨柯里化的文章中进行更加详细讲解。</p><p><strong>匿名函数的这个应用场景几乎承担了函数的所有难以理解的知识点</strong>，因此我们一定要对它的这些细节了解的足够清楚，如果对于变量对象的演变过程你还看不太明白，一定要回过头去看这篇文章：<a href=\"https://www.jianshu.com/p/330b1505e41d\" target=\"_blank\">前端基础进阶（三）：变量对象详解</a></p><p><strong>函数自执行与块级作用域</strong></p><p>在ES5中，没有块级作用域，因此我们常常使用函数自执行的方式来模仿块级作用域，这样就提供了一个独立的执行上下文，结合闭包，就为模块化提供了基础。而函数自执行，其实是匿名函数的一种应用。</p><pre class=\"ql-syntax\" spellcheck=\"false\">(function() {\n   // ...\n})();\n</pre><p>一个模块往往可以包括：私有变量、私有方法、公有变量、公有方法。</p><p>根据作用域链的单向访问，外面可能很容易知道在这个独立的模块中，外部执行环境是无法访问内部的任何变量与方法的，因此我们可以很容易的创建属于这个模块的私有变量与私有方法。</p><pre class=\"ql-syntax\" spellcheck=\"false\">(function() {\n    // 私有变量\n    var age = 20;\n    var name = \'Tom\';\n\n    // 私有方法\n    function getName() {\n        return `your name is ` + name;\n    }\n})();\n</pre><p>但是共有方法和变量应该怎么办？大家还记得我们前面讲到过的<strong>闭包</strong>的特性吗？没错，利用闭包，我们可以访问到执行上下文内部的变量和方法，因此，我们只需要根据闭包的定义，创建一个闭包，将你认为需要公开的变量和方法开放出来即可。</p><blockquote>如果你对闭包了解不够，<a href=\"https://www.jianshu.com/p/21a16d44f150\" target=\"_blank\">前端基础进阶（四）：详细图解作用域链与闭包</a>应该可以帮到你。</blockquote><pre class=\"ql-syntax\" spellcheck=\"false\">(function() {\n    // 私有变量\n    var age = 20;\n    var name = \'Tom\';\n\n    // 私有方法\n    function getName() {\n        return `your name is ` + name;\n    }\n\n    // 共有方法\n    function getAge() {\n        return age;\n    }\n\n    // 将引用保存在外部执行环境的变量中，形成闭包，防止该执行环境被垃圾回收\n    window.getAge = getAge;\n})();\n</pre><p>当然，闭包在模块中的重要作用，我们也在讲解闭包的时候已经强调过，但是这个知识点真的太重要，需要我们反复理解并且彻底掌握，因此为了帮助大家进一步理解闭包，我们来看看jQuery中，是如何利用我们模块与闭包的。</p><pre class=\"ql-syntax\" spellcheck=\"false\">// 使用函数自执行的方式创建模块\n(function(window, undefined) {\n\n    // 声明jQuery构造函数\n     var jQuery = function(name) {\n\n        // 主动在构造函数中，返回一个jQuery实例\n         return new jQuery.fn.init(name);\n     }\n\n    // 添加原型方法\n     jQuery.prototype = jQuery.fn = {\n         constructor: jQuery,\n         init:function() { ... },\n         css: function() { ... }\n     }\n     jQuery.fn.init.prototype = jQuery.fn;\n\n    // 将jQuery改名为$，并将引用保存在window上，形成闭包，对外开发jQuery构造函数，这样我们就可以访问所有挂载在jQuery原型上的方法了\n     window.jQuery = window.$ = jQuery;\n })(window);\n\n// 在使用时，我们直接执行了构造函数，因为在jQuery的构造函数中通过一些手段，返回的是jQuery的实例，所以我们就不用再每次用的时候在自己new了\n$(\'#div1\');\n</pre><p>在这里，我们只需要看懂闭包与模块的部分就行了，至于内部的原型链是如何绕的，为什么会这样写，我在讲面向对象的时候会为大家慢慢分析。举这个例子的目的所在，就是希望大家能够重视函数，因为在实际开发中，它无处不在。</p><p>接下来我要分享一个高级的，非常有用的模块的应用。当我们的项目越来越大，那么需要保存的数据与状态就越来越多，因此，我们需要一个专门的模块来维护这些数据，这个时候，有一个叫做状态管理器的东西就应运而生。对于状态管理器，最出名的，我想非redux莫属了。虽然对于还在学习中的大家来说，redux是一个有点高深莫测的东西，但是在我们学习之前，可以先通过简单的方式，让大家大致了解状态管理器的实现原理，为我们未来的学习奠定坚实的基础。</p><p>先来直接看代码。</p><pre class=\"ql-syntax\" spellcheck=\"false\">// 自执行创建模块\n(function() {\n    // states 结构预览\n    // states = {\n    //     a: 1,\n    //     b: 2,\n    //     m: 30,  \n    //     o: {}\n    // }\n    var states = {};  // 私有变量，用来存储状态与数据\n\n    // 判断数据类型\n    function type(elem) {\n        if(elem == null) {\n            return elem + \'\';\n        }\n        return toString.call(elem).replace(/[\\[\\]]/g, \'\').split(\' \')[1].toLowerCase();\n    }\n\n\n    /**\n     * @Param name 属性名\n     * @Description 通过属性名获取保存在states中的值\n    */\n    function get(name) {\n        return states[name] ? states[name] : \'\';\n    }\n\n    function getStates() {\n        return states;\n    }\n\n    /*\n    * @param options {object} 键值对\n    * @param target {object} 属性值为对象的属性，只在函数实现时递归中传入\n    * @desc 通过传入键值对的方式修改state树，使用方式与小程序的data或者react中的setStates类似\n    */\n    function set(options, target) {\n        var keys = Object.keys(options);\n        var o = target ? target : states;\n\n        keys.map(function(item) {\n            if(typeof o[item] == \'undefined\') {\n                o[item] = options[item];\n            }\n            else {\n                type(o[item]) == \'object\' ? set(options[item], o[item]) : o[item] = options[item];\n            }\n            return item;\n        })\n    }\n\n    // 对外提供接口\n    window.get = get;\n    window.set = set;\n    window.getStates = getStates;\n})()\n\n// 具体使用如下\n\nset({ a: 20 });     // 保存 属性a\nset({ b: 100 });    // 保存属性b\nset({ c: 10 });     // 保存属性c\n\n// 保存属性o, 它的值为一个对象\nset({\n    o: {\n        m: 10,\n        n: 20\n    }\n})\n\n// 修改对象o 的m值\nset({\n    o: {\n        m: 1000\n    }\n})\n\n// 给对象o中增加一个c属性\nset({\n    o: {\n        c: 100\n    }\n})\nconsole.log(getStates())\n</pre><p><a href=\"http://codepen.io/yangbo5207/pen/EZzEbY?editors=1111\" target=\"_blank\">demo实例在线地址</a></p><p>我之所以说这是一个高级应用，是因为在单页应用中，我们很可能会用到这样的思路。根据我们提到过的知识，理解这个例子其实很简单，其中的难点估计就在于set方法的处理上，因为为了具有更多的适用性，因此做了很多适配，用到了递归等知识。如果你暂时看不懂，没有关系，知道如何使用就行了，上面的代码可以直接运用于实际开发。记住，当你需要保存的状态太多的时候，你就想到这一段代码就行了。</p><blockquote>函数自执行的方式另外还有其他几种写法，诸如<code>!function(){}()</code>，<code>+function(){}()</code></blockquote><h5>二、函数参数传递方式：按值传递</h5><p>还记得基本数据类型与引用数据类型在复制上的差异吗？基本数据类型复制，是直接值发生了复制，因此改变后，各自相互不影响。但是引用数据类型的复制，是保存在变量对象中的引用发生了复制，因此复制之后的这两个引用实际访问的实际是同一个堆内存中的值。当改变其中一个时，另外一个自然也被改变。如下例。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var a = 20;\nvar b = a;\nb = 10;\nconsole.log(a);  // 20\n\nvar m = { a: 1, b: 2 }\nvar n = m;\nn.a = 5;\nconsole.log(m.a) // 5\n</pre><p>当值作为函数的参数传递进入函数内部时，也有同样的差异。我们知道，函数的参数在进入函数后，实际是被保存在了函数的变量对象中，因此，这个时候相当于发生了一次复制。如下例。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var a = 20;\n\nfunction fn(a) {\n    a = a + 10;\n    return a;\n}\nfn(a);\nconsole.log(a); // 20\nvar a = { m: 10, n: 20 }\nfunction fn(a) {\n    a.m = 20;\n    return a;\n}\n\nfn(a);\nconsole.log(a);   // { m: 20, n: 20 }\n</pre><p>正是由于这样的不同，导致了许多人在理解函数参数的传递方式时，就有许多困惑。到底是按值传递还是按引用传递？实际上结论仍然是按值传递，只不过当我们期望传递一个引用类型时，真正传递的，只是这个引用类型保存在变量对象中的引用而已。为了说明这个问题，我们看看下面这个例子。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var person = {\n    name: \'Nicholas\',\n    age: 20\n}\n\nfunction setName(obj) {  // 传入一个引用\n    obj = {};   // 将传入的引用指向另外的值\n    obj.name = \'Greg\';  // 修改引用的name属性\n}\n\nsetName(person);\nconsole.log(person.name);  // Nicholas 未被改变\n</pre><p>在上面的例子中，如果person是按引用传递，那么person就会自动被修改为指向其name属性值为Gerg的新对象。但是我们从结果中看到，person对象并未发生任何改变，因此只是在函数内部引用被修改而已。</p><h5>四、函数式编程</h5><p>虽然JavaScript并不是一门纯函数式编程的语言，但是它使用了许多函数式编程的特性。因此了解这些特性可以让我们更加了解自己写的代码。</p><p>当我们想要使用一个函数时，通常情况下其实就是想要将一些功能，逻辑等封装起来。相信大家对于封装这个概念并不陌生。</p><p>我们通常通过函数封装来完成一件事情。例如，我想要计算任意三个数的和，我们就可以将这三个数作为参数，封装一个简单的函数。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function add(a, b, c) {\n  return a + b + c;\n}\n</pre><p>当我们想要计算三个数的和时，直接调用该方法即可。</p><pre class=\"ql-syntax\" spellcheck=\"false\">add(1, 2, 3); // 6\n</pre><p>当然，当我们想要做的事情比较简单的时候，可能还看不出来封装成为函数之后带来的便利。如果我们想要做的事情稍微复杂一点呢。例如我想要计算一个数组中的所有子项目的和。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function mergeArr(arr) {\n    var result = 0;\n    for(var i = 0; i &lt; arr.length; i++) { result  += arr[i] }\n    return result;\n}\n</pre><p>如果我们不通过函数封装的方式，那么再每次想要实现这个功能时，就不得不重新使用一次for循环，这样的后果就是我们的代码中充斥着越来越多的重复代码。而封装之后，当我们想要再次做这件事情的时候，只需要一句话就可以了。</p><pre class=\"ql-syntax\" spellcheck=\"false\">mergeArr([1, 2, 3, 4, 5]);\n</pre><p>当然，我相信大家对于函数封装的意义都应该有非常明确的认知，但是我们要面临的问题是，当我们想要去封装一个函数时，如何做才是最佳实践呢？</p><p>函数式编程能给我们答案。</p><p>我们在初学时，往往会不由自主的使用命令式编程的风格来完成我们想要干的事情。因为命令式编程更加的简单，直白。例如我们现在有一个数组，<code>array = [1, 3, \'h\', 5, \'m\', \'4\']</code>，现在想要找出这个数组中的所有类型为number的子项。当我们使用命令式编程思维时，可能就会直接这样做。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var array = [1, 3, \'h\', 5, \'m\', \'4\'];\nvar res = [];\nfor(var i = 0; i &lt; array.length; i ++) {\n    if (typeof array[i] === \'number\') {\n        res.push(array[i]);\n    }\n}\n</pre><p>在这种实现方式中，我们平铺直叙的实现了我们的目的。这样做的问题在于，当我们在另外的时刻，想要找出另外一个数组中所有的子项时，我们不得不把同样的逻辑再写一次。当出现次数变多时，我们的代码也变得更加糟糕且难以维护。</p><p>而函数式编程的思维则建议我们将这种会多次出现的功能封装起来以备调用。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function getNumbers(array) {\n    var res = [];\n    array.forEach(function(item) {\n        if (typeof item === \'number\') {\n            res.push(item);\n        }\n    })\n    return res;\n}\n\n\n\n// 以上是我们的封装，以下是功能实现\nvar array = [1, 3, \'h\', 5, \'m\', \'4\'];\nvar res = getNumbers(array);\n</pre><p>因此当我们将功能封装之后，我们实现同样的功能时，只需要写一行代码。而如果未来需求变动，或者稍作修改，我们只需要对getNumbers方法进行调整就可以了。而且我们在使用时，只需要关心这个方法能做什么，而不用关心他具体是怎么实现的。这也是函数式编程思维与命令式不同的地方之一。</p><p>函数式编程思维还具有以下几个特征。</p><p><strong>函数是第一等公民</strong></p><p>所谓\"第一等公民\"（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。这些场景，我们应该见过很多。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var a = function foo() {}  // 赋值\nfunction fn(function() {}, num) {}   // 函数作为参数\n\n// 函数作为返回值\nfunction var() {\n    return function() {\n        ... ...\n    }\n}\n\n</pre><p>当然，这都是JavaScript的基本概念。但是我想很多人，甚至包括正在阅读的你自己都可能会无视这些概念。可以用一个简单的例子来验证一下。</p><p>我们先自定义这样一个函数。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function delay() {\n    console.log(\'5000ms之后执行该方法.\');\n}\n</pre><p>现在要做的是，如果要求你结合setTimeout方法，让delay方法延迟5000ms执行，应该怎么做？</p><p>其实很简单，对不对，直接这样就可以了。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var timer = setTimeout(function() {\n    delay();\n}, 5000);\n</pre><p>那么现在问题来了，如果你对函数是一等公民有一个深刻的认知，我想你会发现上面这种写法其实是有一些问题的。所以思考一下，问题出在哪里？</p><p>函数既然能够作为一个参数传入另外一个函数，那么我们是不是可以直接将delay作为setTimeout的第一个参数，而不用额外的多加一层匿名函数呢？</p><p>因此，其实最正确的解法应该这样写。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var timer = setTimeout(delay, 5000);\n</pre><p>当然，如果你已经提前想到这样做了，那么恭喜你，说明你在JavaScript上比普通人更有天赋。其实第一种糟糕的方式很多人都在用，包括有多年工作经验的人也没有完全避免。而他们甚至还不知道自己问题出在什么地方。</p><p>在未来的实践中，你还会遇到更多类似的场景。为了验证读者朋友们的理解，我们不妨来思考一下如何优化下面的代码。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function getUser(path, callback) {\n    return $.get(path, function(info) {\n        return callback(info);\n    })\n}\n\ngetUser(\'/api/user\', function(resp) {\n    // resp为成功请求之后返回的数据\n    console.log(resp);\n})\n</pre><p>优化的原理和setTimeout的例子一模一样，我这里卖个关子，不打算告诉大家结论，仅提示一句，getUser优化之后，仅有一句代码。考验大家学习成果的时候到了 ^ ^。</p><p><strong>只用\"表达式\"，不用\"语句\"</strong></p><p>\"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p>假如我们的项目中，多处需要改变某个元素的背景色。因此我们可以这样封装一下。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var ele = document.querySelector(\'.test\');\nfunction setBackgroundColor(color) {\n    ele.style.backgroundColor = color;\n}\n\n// 多处使用\nsetBackgroundColor(\'red\');\nsetBackgroundColor(\'#ccc\');\n</pre><p>我们可以很明显的感受到，setBackgroundColor封装的仅仅只是一条语句。这并不是理想的效果。函数式编程期望一个函数有输入，也有输出。因此良好的习惯应该如下做。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function setBackgroundColor(ele, color) {\n    ele.style.backgroundColor = color;\n    return color;\n}\n\n// 多处使用\nvar ele = document.querySelector(\'.test\');\nsetBackgroundColor(ele, \'red\');\nsetBackgroundColor(ele, \'#ccc\');\n</pre><p>了解这一点，可以让我们自己在封装函数的时候养成良好的习惯。</p><p><strong>纯函数</strong></p><p>相同的输入总会得到相同的输出，并且不会产生副作用的函数，就是纯函数。</p><p>所谓\"副作用\"（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p>函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p><p>即所谓的只要是同样的参数传入，返回的结果一定是相等的。</p><p>例如我们期望封装一个函数，能够得到传入数组的最后一项。那么可以通过下面两种方式来实现。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function getLast(arr) {\n    return arr[arr.length];\n}\n\nfunction getLast_(arr) {\n    return arr.pop();\n}\n\nvar source = [1, 2, 3, 4];\n\nvar last = getLast(source); // 返回结果4 原数组不变\nvar last_ = getLast_(source); // 返回结果4 原数据最后一项被删除\n</pre><p>getLast与getLast_虽然同样能够获得数组的最后一项值，但是getLast_改变了原数组。而当原始数组被改变，那么当我们再次调用该方法时，得到的结果就会变得不一样。这样不可预测的封装方式，在我们看来是非常糟糕的。它会把我们的数据搞得非常混乱。在JavaScript原生支持的数据方法中，也有许多不纯的方法，我们在使用时需要非常警惕，我们要清晰的知道原始数据的改变是否会留下隐患。</p><pre class=\"ql-syntax\" spellcheck=\"false\">var source = [1, 2, 3, 4, 5];\n\nsource.slice(1, 3); // 纯函数 返回[2, 3] source不变\nsource.splice(1, 3); // 不纯的 返回[2, 3, 4] source被改变\n\nsource.pop(); // 不纯的\nsource.push(6); // 不纯的\nsource.shift(); // 不纯的\nsource.unshift(1); // 不纯的\nsource.reverse(); // 不纯的\n\n// 我也不能短时间知道现在source被改变成了什么样子，干脆重新约定一下\nsource = [1, 2, 3, 4, 5];\n\nsource.concat([6, 7]); // 纯函数 返回[1, 2, 3, 4, 5, 6, 7] source不变\nsource.join(\'-\'); // 纯函数 返回1-2-3-4-5 source不变\n</pre><p><strong>闭包</strong></p><p>闭包是函数式编程语言的重要特性，我也在前面几篇文章中说了很多关于闭包的内容。这里不再赘述。</p><p><br></p><p><br></p>','https://www.jianshu.com/p/69dede6f7e5f','javascript','2018-11-17 17:47:48','Jason',NULL,'jason',6),(20,'Live an Interesting Life','ZAT RANA','<p>Katherine Miller lives a strange life. She only actually works for six months of the year.</p><p>She’s a Process Engineer for a mining company in Australia. The cause of her unique work schedule is the mine’s location. It’s in a remote area inaccessible from any major town. There aren’t enough people around to hire locally, so her company has built a village in the region.</p><p>This means that the workforce is rotated in and out. In Miller’s case, she works for 12 hours a day for two weeks before somebody else takes her place for the two weeks that she’s off.</p><p>The lifestyle isn’t for everyone. Being away from home for a few weeks at a time isn’t easy, and the work days are challenging. The whole idea is even more daunting if you have a family.</p><p>Miller, however, enjoys her job. She’s excited about solving problems, and each day allows her to do exactly that. In spite of the compromises, she can’t imagine having it any other way.</p><p>Being in her mid-twenties, she doesn’t have a family to worry about, and on top of that, she also doesn’t have a home. When she works, housing is provided, and when she’s off, she chooses to travel with the money not spent on rent and living expenses.</p><p>Her life is a version of the often romanticized&nbsp;<em>“work hard, play hard”</em>&nbsp;maxim, and she loves it.1</p><p>Of course, not only is an arrangement like that not feasible for most people, but it’s also not universally appealing. Everyone has their own definition of work and play. That said, there’s an underlying formula in Miller’s life that we all can use to live an interesting life by:</p><p>• Crafting routines that add meaning and identity</p><p>• Designing for autonomy to create empowerment</p><p>• Balancing with variety to maintain appreciation</p><p>We have more flexibility to redesign our life than we think. More of us should actively do so.</p><h3><strong>Craft Routines That Add Meaning and Identity</strong></h3><p>Routines aren’t sexy. They rarely provide any immediate returns, and they can make us feel caged. There’s little short-term spice in following the same loop day in, day out. If we’re doing the same thing over and over again, there’s a lot else in life we’re not doing.</p><p>In spite of their short-term unsexiness, however, routines help us meet the demands of life. They limit the decisions we have to make, and they better allocate our focus.</p><p>In a study published as a collaboration between the Columbia Business School and Ben Gurion University, researchers analyzed 1,112 rulings made by judges on parole boards. The judges began their day with a session, took a break, and then finished off another session.</p><p>They were measured for the number of favorable rulings they made throughout the day, and the researchers found that each session began with about a 65% chance of a positive ruling and went downhill after that. This was true for the sessions before and after the midday break. The longer the judges made decisions, the less consistent their judgment became.&nbsp;2</p><p>This is a well-known phenomenon in behavioral psychology. It’s called decision fatigue.</p><p>Good routines allow us to bypass unnecessary decisions, so we can orient ourselves when it matters. They cut out needless choice in the short-term to reward us in the long-term.</p><p>Pretty much anything that modern society values as a great accomplishment requires a routine to fuel it. To get the most out of something, whether it be a career, hobby, or a relationship, we need to invest time, and we need to do so systematically and consistently.</p><p>It’s not always exciting for even the artists or entrepreneurs, chasing their dreams, to get up and get to work at 6 AM every day, but that’s a part of pursuing something valuable.</p><p>Without routines to automate and guide our behavior, we get pulled in far too many directions, and that stops us from making the choices that we need to craft a purposeful future.</p><p>That said, the fruits of the labor don’t just show themselves in the form of accomplishment. The process of meaningful investment, even if it isn’t always fun, keeps us grounded. It connects us to a source, and there are moments in life when that can be of critical importance.</p><p>Without the commitment of good routines, it’s far harder to forge a sense of long-term identity.</p><h3><strong>Design for Autonomy to Create Empowerment</strong></h3><p>Routines generally get an unfair reputation, but sometimes, there’s a good reason for it.</p><p>No matter what the routine, there’s a cost that comes with the discipline that it infuses into our life. It has a degree of control over us even if we pursue it by choice because it limits what we can do beyond the parameters that it enforces.</p><p>To live an existence of more than just limitations, we need to design parts of life for autonomy to create empowerment. Autonomy is closer to living in the moment. It welcomes some of the instant gratification and pleasure that we need to enjoy life on a more consistent basis.</p><p>In 1997, Richard Ryan and Christina Frederick conducted an extensive meta-analysis of six different studies to measure the effect of subjective vitality (a positive feeling of energy and aliveness) on general well-being across a multitude of factors.</p><p>Interestingly enough, not only did they find a correlation between the two, but they also drew on established theories of human motivation and found that autonomy, in particular, played a large role in energy levels of the subjects across the studies. When people had a degree of control, they showed higher levels of vitality, which subsequently influenced their well-being.&nbsp;3</p><p>Too many choices might be exhausting, but reasonable empowerment is exciting. It adds a sense of possibility beyond what we know, and that’s liberating. There really is more to life.</p><p>There are far too many people simply going through the motions, while not being content with how they’re living. They live their life for an indeterminate future. It’s a suboptimal strategy.</p><p>If that’s you, then maybe it’s time to prioritize more autonomy in your life. If you feel stuck, then maybe you need more control than the illusion provided by what appears as&nbsp;<em>“free time.”</em></p><p>Naturally, for many of us, certain commitments aren’t too flexible. Bills need to be paid, and relationships need attention. That said, there are still more options than we intuitively think.</p><p>We all get 168 hours a week. If you do an honest audit of how you spend them, you’d be surprised at how much wasted time can be carved out for activities that create autonomy.</p><h3><strong>Balance With Variety to Maintain Appreciation</strong></h3><p>Routines add meaning, and they uncomplicate our lives, but autonomy adds the flavor.</p><p>That said, there is such a thing as too much autonomy, too. In small doses, it’s invaluable, but we can also easily become desensitized to its appeal. By nature, autonomy pushes us towards instant gratification, and although the pleasure it brings can help us get more out of life, the problem with instant gratification is that it leads to a cycle of more. That’s not a good thing.</p><p>The more we get, the more we want, and the game of relativity warps our perception quickly and unsuspectingly. It cheapens the good but still has us craving more. On the surface, it can open up an ocean of possibilities, but in reality, that only leads to disorientation.</p><p>Over short periods, there will be a misbalance here and there. As the months and years add up, however, we should have a healthy divide between the two. To maintain appreciation, we need to balance the pleasure invited by autonomy with the meaning inspired by routines.</p><p>Let’s recount the story of Katherine Miller.</p><p>Over the course of the year, half of her time is spent doing something she really enjoys at work. Sure, it’s hard stuff, and it has its ups and downs, but for the most part, that’s her source of usefulness and identity. It keeps her mind engaged and interested.</p><p>The other half of the year, she spends traveling. It’s a lifestyle in which she practically chooses do whatever she wants in windows of two week periods. It allows her to get away from some of the more mundane aspects of living a life of consistency, and that’s empowering.</p><p>Taken to the extreme, in a different world, if she did one exclusively without the other, she might find herself engorged and excited for a while, and it might even last for up to a year or two. But in most scenarios, either extreme would likely leave her dissatisfied in the long run.</p><p>Knowing the balance needed to appreciate the many layers of life is a personal undertaking.</p><p>It makes sense to develop an understanding of where on the spectrum you stand. As famed researcher Daniel Gilbert points out in&nbsp;<a href=\"http://www.designluck.com/recommends/stumbling-on-happiness/\" target=\"_blank\" style=\"color: rgb(210, 171, 116);\"><em>Stumbling on Happiness</em></a><em>,</em>&nbsp;<em>“The secret of happiness is variety, but the secret of variety, like the secret of all spices, is knowing when to use it.”</em></p><h3><strong>All You Need to Know</strong></h3><p>In truth, it’s virtually impossible to dissect what it is that makes us happy. There’s no comprehensive package out there that’s broad enough to enlighten everyone. We’re born with different genes, we live in different environments, and we entertain different perspectives.</p><p>We can somewhat target unhappiness, we can list correlations that research has uncovered, and we make loose predictions based on experience, but the more we aim for happiness itself, the more elusive it often appears.</p><p>In some ways, we can reason that there’s a way there with a healthy mixture of meaning and pleasure. And if we settle with that, by focusing on optimally incorporating the two, we can at least live an interesting life. That’s the focus here, and there are three parts to it.</p><p><strong>I.&nbsp;</strong>Craft routines that add meaning. They might not always be sexy in the short-term, but they’re invaluable in any quest to accomplish something over time. They allow us to bypass needless choice, and they ground to us to an identity. Without them, we would be paralyzed into making decisions that misalign with future prosperity.</p><p><strong>II.</strong>&nbsp;Design for autonomy to create empowerment. Routines, whether good or bad, often have a degree of control over us. They confine what we can do, and that’s not always ideal. To live beyond just limitations, we need autonomy, too. We need the option to indulge in the easy pleasures of life, and we need to feel liberated and in charge.</p><p><strong>III.</strong>&nbsp;Balance the two with variety to maintain an appreciation of both. Excess of one or the other is unhealthy. It’s about stabilizing the meaning and structure of routines with the empowerment of autonomy. If you feel trapped by your routines, you need a dose of autonomy. If you feel desensitized by the autonomy, you need to mix in a few routines.</p><p>That’s it. It’s by no means a blueprint, but it can serve as a useful mental model. In fact, it’s very much incomplete, and different people will extract their own nuggets of value from it. The only point is to inspire thinking about how to live deliberately. Autopilot doesn’t cut it.</p><p>Balance doesn’t always mean an even divide. It’s about what works. Explore and play around.</p>','https://designluck.com/interesting-life/','others','2018-11-18 10:25:28','jason',NULL,'jason',4),(26,'Flex 布局教程：语法篇','阮一峰','<h2>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box{\n  display: flex;\n}\n</pre><p>行内元素也可以使用 Flex 布局。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box{\n  display: inline-flex;\n}\n</pre><p>Webkit 内核的浏览器，必须加上<code style=\"background-color: pink;\">-webkit</code>前缀。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n</pre><p>注意，设为 Flex 布局以后，子元素的<code style=\"background-color: pink;\">float</code>、<code style=\"background-color: pink;\">clear</code>和<code style=\"background-color: pink;\">vertical-align</code>属性将失效。</p><p><br></p><h2>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。</p><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code style=\"background-color: pink;\">main start</code>，结束位置叫做<code style=\"background-color: pink;\">main end</code>；交叉轴的开始位置叫做<code style=\"background-color: pink;\">cross start</code>，结束位置叫做<code style=\"background-color: pink;\">cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code style=\"background-color: pink;\">main size</code>，占据的交叉轴空间叫做<code style=\"background-color: pink;\">cross size</code>。</p><p><br></p><h2>三、容器的属性</h2><p>以下6个属性设置在容器上。</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3>3.1 flex-direction属性</h3><p><code style=\"background-color: pink;\">flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\"></p><p>它可能有4个值。</p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><h3>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称\"轴线\"）上。<code style=\"background-color: pink;\">flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\"></p><pre class=\"ql-syntax\" spellcheck=\"false\">.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n</pre><p>它可能取三个值。</p><p>（1）<code style=\"background-color: pink;\">nowrap</code>（默认）：不换行。</p><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png\"></p><p>（2）<code style=\"background-color: pink;\">wrap</code>：换行，第一行在上方。</p><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg\"></p><p>（3）<code style=\"background-color: pink;\">wrap-reverse</code>：换行，第一行在下方。</p><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg\"></p><h3>3.3 flex-flow</h3><p><code style=\"background-color: pink;\">flex-flow</code>属性是<code style=\"background-color: pink;\">flex-direction</code>属性和<code style=\"background-color: pink;\">flex-wrap</code>属性的简写形式，默认值为<code style=\"background-color: pink;\">row nowrap</code>。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box {\n  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\n}\n</pre><h3>3.4 justify-content属性</h3><p><code style=\"background-color: pink;\">justify-content</code>属性定义了项目在主轴上的对齐方式。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3>3.5 align-items属性</h3><p><code style=\"background-color: pink;\">align-items</code>属性定义项目在交叉轴上如何对齐。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3>3.6 align-content属性</h3><p><code style=\"background-color: pink;\">align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\"></p><p>该属性可能取6个值。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><h3>四、项目的属性</h3><p>以下6个属性设置在项目上。</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><h3>4.1 order属性</h3><p><code style=\"background-color: pink;\">order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  order: &lt;integer&gt;;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png\"></p><h3>4.2 flex-grow属性</h3><p><code style=\"background-color: pink;\">flex-grow</code>属性定义项目的放大比例，默认为<code style=\"background-color: pink;\">0</code>，即如果存在剩余空间，也不放大。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  flex-grow: &lt;number&gt;; /* default 0 */\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png\"></p><p>如果所有项目的<code style=\"background-color: pink;\">flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code style=\"background-color: pink;\">flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3>4.3 flex-shrink属性</h3><p><code style=\"background-color: pink;\">flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  flex-shrink: &lt;number&gt;; /* default 1 */\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg\"></p><p>如果所有项目的<code style=\"background-color: pink;\">flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code style=\"background-color: pink;\">flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3>4.4 flex-basis属性</h3><p><code style=\"background-color: pink;\">flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code style=\"background-color: pink;\">auto</code>，即项目的本来大小。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  flex-basis: &lt;length&gt; | auto; /* default auto */\n}\n</pre><p>它可以设为跟<code style=\"background-color: pink;\">width</code>或<code style=\"background-color: pink;\">height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h3>4.5 flex属性</h3><p><code style=\"background-color: pink;\">flex</code>属性是<code style=\"background-color: pink;\">flex-grow</code>,&nbsp;<code style=\"background-color: pink;\">flex-shrink</code>&nbsp;和&nbsp;<code style=\"background-color: pink;\">flex-basis</code>的简写，默认值为<code style=\"background-color: pink;\">0 1 auto</code>。后两个属性可选。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  flex: none | [ &lt;\'flex-grow\'&gt; &lt;\'flex-shrink\'&gt;? || &lt;\'flex-basis\'&gt; ]\n}\n</pre><p>该属性有两个快捷值：<code style=\"background-color: pink;\">auto</code>&nbsp;(<code style=\"background-color: pink;\">1 1 auto</code>) 和 none (<code style=\"background-color: pink;\">0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3>4.6 align-self属性</h3><p><code style=\"background-color: pink;\">align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code style=\"background-color: pink;\">align-items</code>属性。默认值为<code style=\"background-color: pink;\">auto</code>，表示继承父元素的<code style=\"background-color: pink;\">align-items</code>属性，如果没有父元素，则等同于<code style=\"background-color: pink;\">stretch</code>。</p><pre class=\"ql-syntax\" spellcheck=\"false\">.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n</pre><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>','http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html','CSS','2018-11-19 11:18:39','jason',NULL,'jason',2),(27,'Make Peace With One Thing to Get More Out of Life','','<p><a href=\"https://johnpweiss.com/?keyvalue=47118&amp;page=Blog&amp;subkeyvalue=139444#POSTCOMMENT\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>Comment on this</strong></a></p><p class=\"ql-align-center\"><img src=\"https://d13egrxi1n6w2z.cloudfront.net/47118_2931142org.jpg\"></p><p>Everybody wants to matter. To make a difference. To stand out, be noticed, and admired (maybe even envied) by others.</p><p>It starts when we’re children. “Hey Mom, look at me!” we shout. “Dad, watch me!” we say, anxious for our parents to pay attention, applaud and show us that we matter. What we don’t understand is that our parents already love us. There’s no need to perform.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Z6w9hJceivVSAnfH0lYn7A.jpeg\"></p><p>&nbsp;</p><p>Adolescence solidifies our insecurities. Raging hormones, awkwardness, acne and the specter of dating all coalesce like famished velociraptors, feasting on the remnants of our self-confidence.</p><h3>Why do we do&nbsp;it?</h3><p>Somehow, wounds and all, we make it to adulthood. But the challenges don’t end there. Karen has a hotter husband than you do. Joey has a better job and car than you do. The Andersons take way better vacations than you do. Just look at their Facebook posts.</p><p>Social media brings out the worst in our insecurities. We become fixated on how many likes, claps and thumbs up we get. We waste inordinate amounts of time primping, arranging and posing for our latest Instagram pictures.</p><p>Why do we do it? Why do we waste hours seeking approval or attention from (mostly) total strangers? Strangers who spend only seconds on your page before moving on to other digital distractions.</p><h3>A self-esteem drug</h3><p>We do it because we want to matter. We want to feel important, valued, noticed, talked about and relevant. In a skewed sort of way, social media has become a self-esteem drug.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*xlG0cm6ZWlEyiP6H_GLi2A.jpeg\"></p><p>&nbsp;</p><p>We spend hours collecting, re-shooting, designing and crafting the best photos, videos and content to show off to the world. Then we wait, eyes blinking from the screen glow, until the likes and claps validate our egos.</p><p>Consider this quote from a&nbsp;<a href=\"https://www.theodysseyonline.com/care-likes\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>post</strong></a>&nbsp;at&nbsp;<a href=\"https://www.theodysseyonline.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>TheOddesseyonline.com</strong></a>:</p><blockquote>“We edit away zits. We edit away fat. We edit away wrinkles. But we also edit away so much more. We edit away emotions. We edit away criticisms. We edit away insecurities. We edit away the lows of the rollercoaster of our lives. We edit away the side of ourselves that we fear others might see.”</blockquote><h3>An unfolding story</h3><p>The fact of the matter is that you are a lengthy novel. An unfolding story, containing millions of words, events, joys, sorrows, hopes, dreams, and…life.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*yQDhUVjigy6pc11AgxrO9g.jpeg\"></p><p>&nbsp;</p><p>It’s your quirks and idiosyncrasies that make you interesting, not how much you might look like Brad Pitt or sing like Adele.</p><p>Your story can’t be captured in carefully curated Instagram photos. Your Facebook feed isn’t the real you. It’s the you who’s searching for attention, or approval, or a boost to your self-esteem.</p><p>Here’s an interesting question to ponder:</p><blockquote>What would you do with your time if you had no audience?</blockquote><h3>Grounded in the moments of our&nbsp;lives</h3><p>Back before the Internet, people used to join service clubs, go bowling, play sports, visit after Church, enjoy sit-down dinners, play cards and&nbsp;<a href=\"https://www.amazon.com/Hasbro-A3264-Battleship-Game/dp/B00C0ULS3G\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>board games.</strong></a></p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*qEf6IXIK8_zvtRqO_lpK_Q.jpeg\"></p><p>&nbsp;</p><p>All of these activities afforded the opportunity to converse. To look one another in the eye, talk, and enjoy the interaction. Share in each other’s humanity.</p><p>The conversations were face to face. We could see the subtle, physical mannerisms. Clues to how our loved ones and friends were really doing. Something you can’t do as easily in a text or email.</p><p>In short, we were more grounded in the moments of our lives. Laughing, patting each other on the back, taking walks, building tree houses. We weren’t wasting hours on social media, trolling for attention and validation. We were out there in the world, living.</p><h3>They’re tools and entertainment devices</h3><p>Now, before you label me a romanticist for days gone by, let me concede. I love the Internet. I love the availability of information, art, great writing, entertainment and even the sense of community that social media (to some extent) provides.</p><p>Thanks to the Internet, it’s easier than ever to connect with like-minded people. Whether you’re into ball room dancing, fine art, birding or spelunking, you can find fellow aficionados online.</p><p>Lonely people, and those in remote locations, can connect with others online. With the Internet, people can start businesses and bypass gatekeepers to share their talents.</p><p>Clearly, the Internet and social media have their place. They’re tools and entertainment portals. Kind of like books.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*tm6bv_NqU37EwJfqVZzhmQ.jpeg\"></p><p class=\"ql-align-center\">&nbsp;Books. The original entertainment portal!</p><p>&nbsp;</p><p>The trick is not to rely on the Internet and social media for your self-esteem. There are millions of people online. There will always be someone better looking, more talented, more successful or with more likes.</p><p>If you want to get more out of life, there’s one thing you need to make peace with. What is it?</p><blockquote>Digital irrelevancy.</blockquote><h3>They live in a&nbsp;fishbowl</h3><p>Don’t confuse personal irrelevancy with digital irrelevancy. None of us are irrelevant. We might feel like that sometimes, but we are hugely relevant to any number of people. Our families, partners, children, and close friends. Not to mention the random people we help in our lives.</p><p>Getting comfortable with digital irrelevancy means accepting that it’s okay not being an online celebrity or superstar. Further, it might actually be&nbsp;better.</p><p>Self.com published an&nbsp;<a href=\"https://www.self.com/story/reasons-to-not-be-famous\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>article</strong></a>&nbsp;on reasons it’s okay you’re not famous.</p><p>For example, famous people have to spend a lot of time managing their image. Everything they do is under a microscope. They live in a fishbowl.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*9nrKVGEr3ug-EQrzYRtVZA.jpeg\"></p><p>&nbsp;</p><p>People judge their every move. Their looks, behavior, generosity, politics, and more. Not to mention, celebrities are always under pressure to produce that next, great thing. Be it a new movie, music CD or cutting edge performance. It must be exhausting.</p><p>The rest of us are free from such burdens. We can experiment and try new things. We don’t have to be “on” all the time, or worry about who our real friends are.</p><p>In the Self.com article, a psychology professor named W. Keith Campbell noted:</p><blockquote>“Doing things for joy or love or connectedness with other people is what makes you fulfilled.”</blockquote><p>The article went on to say:</p><blockquote>“If you’re amazing at something and want to share it, great. But you’ll get a lot more out of it if you do it because you want to learn and improve — not sell tickets to a show called&nbsp;You.”</blockquote><p>When you’re not a celebrity, you get to be you. You don’t have to worry about hate mail or how long your shelf life will last.</p><p>Think how hard it must be for all those 1980’s TV stars that are now on late-night TV, hawking miracle creams and reverse mortgages. How demoralizing.</p><h3>No one is&nbsp;immune</h3><p>Most of us have fantasized at one time or another about fame. Children wish they were superheroes. Teens imagine themselves as music or movie stars. Some adults dream of high, political office.</p><p>When we come to realize that such aspirations are often unlikely, we turn to social media to make our mark. No one is immune. After all, it’s very satisfying to receive “likes” and “claps” from strangers who enjoy our blog, music, artwork, etc.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*IFKvXacHCTxohDk0VH1UhQ.jpeg\"></p><p>&nbsp;</p><p>The problem is that people are capricious. Every day, I’m blessed to have new subscribers join my email list. But every time I publish a new email newsletter, a number of readers un-subscribe.</p><p>There’s generally no rhyme or reason to it. Some readers rave about a post, and others hate it.</p><p>When I first started blogging, I was fixated on “growing my audience.” I dreamt of creating courses, books, products and making a lot of money. Such things are certainly possible, if you create great content and connect with people.</p><p>The problem was, I came to realize that I was living a lie. I was aping other successful bloggers, and not staying true to my personal passions. Namely, landscape painting, cartooning and writing. I didn’t want to become a blogging business. I just wanted to share my artistry with others.</p><p>Somehow, I got sidetracked. I wanted more likes. I wanted more subscribers. I didn’t stop to ask an important question:</p><blockquote>To what&nbsp;end?</blockquote><p>It’s a good question to ask yourself. To what end are you pursuing all this online stuff? Let’s face it, the Internet is crowded. Not everyone will become an online celebrity. But even for the ones who do, I wonder if it’s all it’s cracked up to be?</p><h3>Hopelessly tethered</h3><p>Fame and success can become their own kind of imprisonment. Imagine being a twenty-something, video game junkie who creates a successful YouTube channel and gains fame.</p><p>Soon, video game companies start advertising with you. Gamers love your style and before long your YouTube channel has turned into a full-blown business. You’re making serious money and have celebrity status.</p><p>Then, a few years click by and you start getting sick of video game stuff. In fact, you always wanted to explore music, but you can’t easily do that now. You have a staff. People depend on you. You found digital relevancy, but now you’re hopelessly branded and tethered. You can’t be the “You” you are now, because you’re intertwined with the digital personality you became.</p><p>C. S. Lewis lectured about the dangers of pursuing the “in” crowd. In most every organization, there is always an “inner ring” of people who are “in the know.” They may not be the ones at the top, either.</p><p>The problem with trying to join the “in” crowd is that, once you’re inside, it’s not all you thought it would be. In time, you might even bore of this group.</p><p>In the long run, it’s far more satisfying to make the work your focus and priority. Make the craft your passion, and stop worrying about fame, celebrity and being part of the “in” crowd.</p><p>I wrote an article that explores this in more detail below.</p><p><a href=\"https://medium.com/personal-growth/be-the-sound-craftsmen-and-free-your-creative-soul-77d21261e449\" target=\"_blank\" style=\"color: rgb(0, 0, 0);\"><strong>Be the Sound Craftsmen and Free Your Creative Soul</strong></a></p><p><br></p><h3>Free your creative&nbsp;soul</h3><p>I finally asked myself, “To what end?” To what end am I trying to become a successful blogger? At first, it was about financial success. Living the “laptop lifestyle” and all that.</p><blockquote>Funny how our egos can derail going after the things we really&nbsp;want.</blockquote><p>Eventually, I regained some emotional maturity. I took C. S. Lewis’s advice. I decided to focus on my craft, and not fame or fortune. Painting, cartooning and writing were the things that brought me happiness. The more I focused on improving my skills, the less I worried about social media and blogging fame.</p><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*EH9SYM-uK5gBx8Oq4rS8kQ.jpeg\"></p><p class=\"ql-align-center\">Drawing cartoons is more fun than social media addiction!</p><p>When we free our creative soul, we realize that it’s okay to embrace digital irrelevancy. We stop slavishly posting and competing with everyone else. We stop tweaking our websites and switching email services.</p><p>We learn to hone in on the work. The passion. For me, it’s that blank page or canvas. It’s the creative possibilities. And the best part is, the more you hone your craft, the more everything else will take care of itself.</p><p>Get comfortable with digital irrelevancy. Get off the social media treadmill and figure out what you really love doing. Then set about learning your craft.</p><p>Put in the time, effort and study. The cream usually rises to the top, and before long, others will take note of your work. Not everyone will follow you, and that’s okay. You don’t want fly by night subscribers and followers. You want diehards, who love and get what you are doing.</p><p>Creating authentic work that feeds your soul is all you need to do. It will fulfill you into old age, long after the Internet celebrities of the moment have moved on to late night TV commercials, selling cheap products made in China.</p>','https://johnpweiss.com/blog/139444/make-peace-with-one-thing-to-get-more-out-of-life','others','2018-11-26 10:56:27','jason',NULL,'jason',0);
/*!40000 ALTER TABLE `blog_tbl` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 trigger delete_colloections
after delete on blog_tbl
for each row
begin
delete from collections where collections.blog_id=old.blog_id;
end */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `clone`
--

DROP TABLE IF EXISTS `clone`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `clone` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(40) NOT NULL,
  `user_password` varchar(100) DEFAULT NULL,
  `create_date` date DEFAULT NULL,
  `user_age` int(11) NOT NULL,
  `last_login` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`,`user_name`),
  KEY `idx` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `clone`
--

LOCK TABLES `clone` WRITE;
/*!40000 ALTER TABLE `clone` DISABLE KEYS */;
INSERT INTO `clone` VALUES (2,'hi','d2881307-ea43-11e8-95e3-107b4446d503',NULL,12,NULL);
/*!40000 ALTER TABLE `clone` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 trigger test before insert on clone
for each row
begin
set new.user_password=uuid();
end */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `collections`
--

DROP TABLE IF EXISTS `collections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `collections` (
  `c_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `blog_id` int(11) NOT NULL,
  `user_name` varchar(40) NOT NULL,
  PRIMARY KEY (`c_id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `collections`
--

LOCK TABLES `collections` WRITE;
/*!40000 ALTER TABLE `collections` DISABLE KEYS */;
INSERT INTO `collections` VALUES (21,1,'jason'),(24,9,'jason'),(25,1,'god'),(26,3,'god'),(27,4,'god'),(28,5,'god'),(29,7,'god'),(78,4,'jason'),(83,3,'jason');
/*!40000 ALTER TABLE `collections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `comment_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `from_user` varchar(40) NOT NULL,
  `to_user` varchar(40) DEFAULT NULL,
  `blog_id` int(11) NOT NULL,
  `content` varchar(500) NOT NULL,
  `time` datetime DEFAULT CURRENT_TIMESTAMP,
  `liked` int(5) DEFAULT '0',
  `disliked` int(5) DEFAULT '0',
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (1,'jason',NULL,1,'沙发','2018-11-15 16:10:03',0,0),(3,'jason',NULL,1,'大致能看懂，但是丢给我一个这样的问题','2018-11-15 17:15:26',0,0),(4,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:48',0,0),(6,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:52',0,0),(7,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:53',0,0),(8,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:54',0,0),(9,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:54',0,0),(10,'jason',NULL,3,'偶然搜到的这个文章 ,看了8章的内容。特别注册了一个号来评价,就八个字! 偶像人物!!! 大师风范!!!','2018-11-15 17:39:54',0,0),(11,'jason',NULL,3,' 偶像人物!!! 大师风范!!!','2018-11-15 17:39:59',0,0),(12,'jason',NULL,3,'还有吗','2018-11-15 17:41:24',0,0),(13,'','jason',1,'沙发','2018-11-16 10:48:47',0,0),(15,'god','jason',1,'换个账号回复一下','2018-11-16 14:58:55',0,0),(16,'god',NULL,4,'占个沙发','2018-11-16 14:59:27',0,0),(17,'god',NULL,4,'二楼','2018-11-16 14:59:50',0,0),(18,'jason',NULL,4,'老铁666','2018-11-16 15:25:34',0,0),(19,'jason','god',1,'谢谢老铁','2018-11-16 15:32:56',0,0),(20,'jason','god',1,'给老铁点个赞','2018-11-16 15:37:16',0,0),(21,'jason','god',1,'还是老铁给力','2018-11-16 15:38:34',0,0),(22,'jason',NULL,1,'mark','2018-11-16 15:55:48',0,0),(23,'jason',NULL,1,'再来一个','2018-11-16 16:01:46',0,0),(24,'jason',NULL,1,'阿斯蒂芬','2018-11-16 16:02:39',0,0),(25,'jason',NULL,1,'还有0楼？','2018-11-16 16:41:57',0,0),(26,'jason','jason',1,'这是什么鬼','2018-11-16 16:42:10',0,0),(28,'jason',NULL,16,'好像都犯过','2018-11-17 15:29:56',0,0),(29,'jason',NULL,16,'以后真的要注意了','2018-11-17 15:30:48',0,0);
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `employee_tbl`
--

DROP TABLE IF EXISTS `employee_tbl`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `employee_tbl` (
  `id` int(11) NOT NULL,
  `name` char(10) NOT NULL DEFAULT '',
  `date` datetime NOT NULL,
  `singin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '登录次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `employee_tbl`
--

LOCK TABLES `employee_tbl` WRITE;
/*!40000 ALTER TABLE `employee_tbl` DISABLE KEYS */;
INSERT INTO `employee_tbl` VALUES (1,'小明','2016-04-22 15:25:33',1),(2,'小王','2016-04-20 15:25:47',3),(3,'小丽','2016-04-19 15:26:02',2),(4,'小王','2016-04-07 15:26:14',4),(5,'小明','2016-04-11 15:26:40',4),(6,'小明','2016-04-04 15:26:54',2);
/*!40000 ALTER TABLE `employee_tbl` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `runoob_tbl`
--

DROP TABLE IF EXISTS `runoob_tbl`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `runoob_tbl` (
  `runoob_id` int(11) NOT NULL AUTO_INCREMENT,
  `runoob_title` varchar(100) NOT NULL,
  `runoob_author` varchar(40) NOT NULL,
  `submission_date` date DEFAULT NULL,
  PRIMARY KEY (`runoob_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `runoob_tbl`
--

LOCK TABLES `runoob_tbl` WRITE;
/*!40000 ALTER TABLE `runoob_tbl` DISABLE KEYS */;
INSERT INTO `runoob_tbl` VALUES (1,'学习 PHP','菜鸟教程','2017-04-12'),(2,'学习 MySQL','菜鸟教程','2017-04-12'),(3,'学习 Java','RUNOOB.COM','2015-05-01'),(4,'学习 Python','RUNOOB.COM','2016-03-06'),(5,'学习 C','FK','2017-04-05');
/*!40000 ALTER TABLE `runoob_tbl` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tcount_tbl`
--

DROP TABLE IF EXISTS `tcount_tbl`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tcount_tbl` (
  `runoob_author` varchar(255) NOT NULL DEFAULT '',
  `runoob_count` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tcount_tbl`
--

LOCK TABLES `tcount_tbl` WRITE;
/*!40000 ALTER TABLE `tcount_tbl` DISABLE KEYS */;
INSERT INTO `tcount_tbl` VALUES ('菜鸟教程',10),('RUNOOB.COM ',20),('Google',22);
/*!40000 ALTER TABLE `tcount_tbl` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(40) NOT NULL,
  `user_password` varchar(100) NOT NULL,
  `create_date` date DEFAULT NULL,
  `user_age` int(11) NOT NULL,
  `last_login` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `login_times` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`user_id`,`user_name`),
  KEY `idx` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=1006 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'jason','123456','2018-11-07',22,'2018-11-26 11:38:05',23),(2,'jackson','123456','2018-11-07',20,'2018-11-18 11:46:03',1),(4,'god','123456','2015-08-23',20,'2018-11-18 14:28:38',1),(5,'happy','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(6,'happy0','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(7,'happy1','54321','2015-03-23',1,'2018-11-17 14:31:39',1),(8,'happy2','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(9,'happy3','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(10,'happy4','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(11,'happy5','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(12,'happy6','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(13,'happy7','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(14,'happy8','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(15,'happy9','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(16,'happy10','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(17,'happy11','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(18,'happy12','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(19,'happy13','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(20,'happy14','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(21,'happy15','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(22,'happy16','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(23,'happy17','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(24,'happy18','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(25,'happy19','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(26,'happy20','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(27,'happy21','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(28,'happy22','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(29,'happy23','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(30,'happy24','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(31,'happy25','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(32,'happy26','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(33,'happy27','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(34,'happy28','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(35,'happy29','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(36,'happy30','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(37,'happy31','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(38,'happy32','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(39,'happy33','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(40,'happy34','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(41,'happy35','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(42,'happy36','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(43,'happy37','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(44,'happy38','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(45,'happy39','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(46,'happy40','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(47,'happy41','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(48,'happy42','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(49,'happy43','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(50,'happy44','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(51,'happy45','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(52,'happy46','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(53,'happy47','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(54,'happy48','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(55,'happy49','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(56,'happy50','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(57,'happy51','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(58,'happy52','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(59,'happy53','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(60,'happy54','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(61,'happy55','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(62,'happy56','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(63,'happy57','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(64,'happy58','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(65,'happy59','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(66,'happy60','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(67,'happy61','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(68,'happy62','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(69,'happy63','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(70,'happy64','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(71,'happy65','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(72,'happy66','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(73,'happy67','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(74,'happy68','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(75,'happy69','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(76,'happy70','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(77,'happy71','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(78,'happy72','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(79,'happy73','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(80,'happy74','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(81,'happy75','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(82,'happy76','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(83,'happy77','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(84,'happy78','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(85,'happy79','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(86,'happy80','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(87,'happy81','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(88,'happy82','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(89,'happy83','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(90,'happy84','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(91,'happy85','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(92,'happy86','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(93,'happy87','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(94,'happy88','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(95,'happy89','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(96,'happy90','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(97,'happy91','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(98,'happy92','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(99,'happy93','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(100,'happy94','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(101,'happy95','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(102,'happy96','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(103,'happy97','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(104,'happy98','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(105,'happy99','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(106,'happy100','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(107,'happy101','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(108,'happy102','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(109,'happy103','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(110,'happy104','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(111,'happy105','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(112,'happy106','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(113,'happy107','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(114,'happy108','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(115,'happy109','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(116,'happy110','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(117,'happy111','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(118,'happy112','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(119,'happy113','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(120,'happy114','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(121,'happy115','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(122,'happy116','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(123,'happy117','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(124,'happy118','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(125,'happy119','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(126,'happy120','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(127,'happy121','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(128,'happy122','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(129,'happy123','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(130,'happy124','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(131,'happy125','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(132,'happy126','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(133,'happy127','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(134,'happy128','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(135,'happy129','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(136,'happy130','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(137,'happy131','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(138,'happy132','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(139,'happy133','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(140,'happy134','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(141,'happy135','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(142,'happy136','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(143,'happy137','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(144,'happy138','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(145,'happy139','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(146,'happy140','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(147,'happy141','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(148,'happy142','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(149,'happy143','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(150,'happy144','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(151,'happy145','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(152,'happy146','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(153,'happy147','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(154,'happy148','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(155,'happy149','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(156,'happy150','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(157,'happy151','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(158,'happy152','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(159,'happy153','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(160,'happy154','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(161,'happy155','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(162,'happy156','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(163,'happy157','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(164,'happy158','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(165,'happy159','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(166,'happy160','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(167,'happy161','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(168,'happy162','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(169,'happy163','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(170,'happy164','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(171,'happy165','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(172,'happy166','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(173,'happy167','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(174,'happy168','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(175,'happy169','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(176,'happy170','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(177,'happy171','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(178,'happy172','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(179,'happy173','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(180,'happy174','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(181,'happy175','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(182,'happy176','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(183,'happy177','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(184,'happy178','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(185,'happy179','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(186,'happy180','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(187,'happy181','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(188,'happy182','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(189,'happy183','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(190,'happy184','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(191,'happy185','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(192,'happy186','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(193,'happy187','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(194,'happy188','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(195,'happy189','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(196,'happy190','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(197,'happy191','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(198,'happy192','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(199,'happy193','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(200,'happy194','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(201,'happy195','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(202,'happy196','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(203,'happy197','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(204,'happy198','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(205,'happy199','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(206,'happy200','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(207,'happy201','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(208,'happy202','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(209,'happy203','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(210,'happy204','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(211,'happy205','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(212,'happy206','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(213,'happy207','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(214,'happy208','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(215,'happy209','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(216,'happy210','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(217,'happy211','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(218,'happy212','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(219,'happy213','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(220,'happy214','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(221,'happy215','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(222,'happy216','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(223,'happy217','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(224,'happy218','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(225,'happy219','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(226,'happy220','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(227,'happy221','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(228,'happy222','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(229,'happy223','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(230,'happy224','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(231,'happy225','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(232,'happy226','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(233,'happy227','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(234,'happy228','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(235,'happy229','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(236,'happy230','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(237,'happy231','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(238,'happy232','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(239,'happy233','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(240,'happy234','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(241,'happy235','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(242,'happy236','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(243,'happy237','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(244,'happy238','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(245,'happy239','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(246,'happy240','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(247,'happy241','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(248,'happy242','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(249,'happy243','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(250,'happy244','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(251,'happy245','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(252,'happy246','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(253,'happy247','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(254,'happy248','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(255,'happy249','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(256,'happy250','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(257,'happy251','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(258,'happy252','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(259,'happy253','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(260,'happy254','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(261,'happy255','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(262,'happy256','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(263,'happy257','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(264,'happy258','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(265,'happy259','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(266,'happy260','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(267,'happy261','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(268,'happy262','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(269,'happy263','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(270,'happy264','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(271,'happy265','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(272,'happy266','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(273,'happy267','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(274,'happy268','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(275,'happy269','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(276,'happy270','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(277,'happy271','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(278,'happy272','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(279,'happy273','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(280,'happy274','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(281,'happy275','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(282,'happy276','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(283,'happy277','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(284,'happy278','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(285,'happy279','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(286,'happy280','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(287,'happy281','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(288,'happy282','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(289,'happy283','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(290,'happy284','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(291,'happy285','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(292,'happy286','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(293,'happy287','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(294,'happy288','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(295,'happy289','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(296,'happy290','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(297,'happy291','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(298,'happy292','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(299,'happy293','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(300,'happy294','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(301,'happy295','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(302,'happy296','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(303,'happy297','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(304,'happy298','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(305,'happy299','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(306,'happy300','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(307,'happy301','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(308,'happy302','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(309,'happy303','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(310,'happy304','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(311,'happy305','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(312,'happy306','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(313,'happy307','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(314,'happy308','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(315,'happy309','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(316,'happy310','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(317,'happy311','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(318,'happy312','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(319,'happy313','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(320,'happy314','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(321,'happy315','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(322,'happy316','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(323,'happy317','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(324,'happy318','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(325,'happy319','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(326,'happy320','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(327,'happy321','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(328,'happy322','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(329,'happy323','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(330,'happy324','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(331,'happy325','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(332,'happy326','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(333,'happy327','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(334,'happy328','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(335,'happy329','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(336,'happy330','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(337,'happy331','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(338,'happy332','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(339,'happy333','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(340,'happy334','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(341,'happy335','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(342,'happy336','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(343,'happy337','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(344,'happy338','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(345,'happy339','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(346,'happy340','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(347,'happy341','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(348,'happy342','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(349,'happy343','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(350,'happy344','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(351,'happy345','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(352,'happy346','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(353,'happy347','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(354,'happy348','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(355,'happy349','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(356,'happy350','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(357,'happy351','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(358,'happy352','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(359,'happy353','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(360,'happy354','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(361,'happy355','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(362,'happy356','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(363,'happy357','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(364,'happy358','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(365,'happy359','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(366,'happy360','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(367,'happy361','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(368,'happy362','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(369,'happy363','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(370,'happy364','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(371,'happy365','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(372,'happy366','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(373,'happy367','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(374,'happy368','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(375,'happy369','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(376,'happy370','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(377,'happy371','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(378,'happy372','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(379,'happy373','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(380,'happy374','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(381,'happy375','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(382,'happy376','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(383,'happy377','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(384,'happy378','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(385,'happy379','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(386,'happy380','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(387,'happy381','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(388,'happy382','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(389,'happy383','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(390,'happy384','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(391,'happy385','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(392,'happy386','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(393,'happy387','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(394,'happy388','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(395,'happy389','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(396,'happy390','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(397,'happy391','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(398,'happy392','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(399,'happy393','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(400,'happy394','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(401,'happy395','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(402,'happy396','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(403,'happy397','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(404,'happy398','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(405,'happy399','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(406,'happy400','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(407,'happy401','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(408,'happy402','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(409,'happy403','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(410,'happy404','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(411,'happy405','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(412,'happy406','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(413,'happy407','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(414,'happy408','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(415,'happy409','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(416,'happy410','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(417,'happy411','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(418,'happy412','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(419,'happy413','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(420,'happy414','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(421,'happy415','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(422,'happy416','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(423,'happy417','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(424,'happy418','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(425,'happy419','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(426,'happy420','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(427,'happy421','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(428,'happy422','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(429,'happy423','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(430,'happy424','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(431,'happy425','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(432,'happy426','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(433,'happy427','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(434,'happy428','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(435,'happy429','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(436,'happy430','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(437,'happy431','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(438,'happy432','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(439,'happy433','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(440,'happy434','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(441,'happy435','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(442,'happy436','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(443,'happy437','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(444,'happy438','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(445,'happy439','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(446,'happy440','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(447,'happy441','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(448,'happy442','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(449,'happy443','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(450,'happy444','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(451,'happy445','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(452,'happy446','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(453,'happy447','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(454,'happy448','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(455,'happy449','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(456,'happy450','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(457,'happy451','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(458,'happy452','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(459,'happy453','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(460,'happy454','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(461,'happy455','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(462,'happy456','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(463,'happy457','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(464,'happy458','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(465,'happy459','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(466,'happy460','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(467,'happy461','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(468,'happy462','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(469,'happy463','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(470,'happy464','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(471,'happy465','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(472,'happy466','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(473,'happy467','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(474,'happy468','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(475,'happy469','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(476,'happy470','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(477,'happy471','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(478,'happy472','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(479,'happy473','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(480,'happy474','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(481,'happy475','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(482,'happy476','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(483,'happy477','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(484,'happy478','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(485,'happy479','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(486,'happy480','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(487,'happy481','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(488,'happy482','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(489,'happy483','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(490,'happy484','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(491,'happy485','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(492,'happy486','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(493,'happy487','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(494,'happy488','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(495,'happy489','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(496,'happy490','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(497,'happy491','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(498,'happy492','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(499,'happy493','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(500,'happy494','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(501,'happy495','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(502,'happy496','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(503,'happy497','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(504,'happy498','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(505,'happy499','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(506,'happy0','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(507,'happy1','54321','2015-03-23',1,'2018-11-17 14:31:39',1),(508,'happy2','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(509,'happy3','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(510,'happy4','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(511,'happy5','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(512,'happy6','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(513,'happy7','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(514,'happy8','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(515,'happy9','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(516,'happy10','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(517,'happy11','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(518,'happy12','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(519,'happy13','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(520,'happy14','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(521,'happy15','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(522,'happy16','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(523,'happy17','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(524,'happy18','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(525,'happy19','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(526,'happy20','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(527,'happy21','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(528,'happy22','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(529,'happy23','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(530,'happy24','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(531,'happy25','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(532,'happy26','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(533,'happy27','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(534,'happy28','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(535,'happy29','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(536,'happy30','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(537,'happy31','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(538,'happy32','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(539,'happy33','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(540,'happy34','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(541,'happy35','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(542,'happy36','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(543,'happy37','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(544,'happy38','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(545,'happy39','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(546,'happy40','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(547,'happy41','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(548,'happy42','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(549,'happy43','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(550,'happy44','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(551,'happy45','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(552,'happy46','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(553,'happy47','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(554,'happy48','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(555,'happy49','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(556,'happy50','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(557,'happy51','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(558,'happy52','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(559,'happy53','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(560,'happy54','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(561,'happy55','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(562,'happy56','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(563,'happy57','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(564,'happy58','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(565,'happy59','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(566,'happy60','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(567,'happy61','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(568,'happy62','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(569,'happy63','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(570,'happy64','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(571,'happy65','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(572,'happy66','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(573,'happy67','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(574,'happy68','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(575,'happy69','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(576,'happy70','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(577,'happy71','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(578,'happy72','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(579,'happy73','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(580,'happy74','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(581,'happy75','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(582,'happy76','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(583,'happy77','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(584,'happy78','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(585,'happy79','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(586,'happy80','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(587,'happy81','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(588,'happy82','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(589,'happy83','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(590,'happy84','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(591,'happy85','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(592,'happy86','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(593,'happy87','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(594,'happy88','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(595,'happy89','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(596,'happy90','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(597,'happy91','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(598,'happy92','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(599,'happy93','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(600,'happy94','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(601,'happy95','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(602,'happy96','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(603,'happy97','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(604,'happy98','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(605,'happy99','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(606,'happy100','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(607,'happy101','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(608,'happy102','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(609,'happy103','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(610,'happy104','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(611,'happy105','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(612,'happy106','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(613,'happy107','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(614,'happy108','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(615,'happy109','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(616,'happy110','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(617,'happy111','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(618,'happy112','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(619,'happy113','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(620,'happy114','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(621,'happy115','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(622,'happy116','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(623,'happy117','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(624,'happy118','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(625,'happy119','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(626,'happy120','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(627,'happy121','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(628,'happy122','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(629,'happy123','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(630,'happy124','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(631,'happy125','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(632,'happy126','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(633,'happy127','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(634,'happy128','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(635,'happy129','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(636,'happy130','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(637,'happy131','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(638,'happy132','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(639,'happy133','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(640,'happy134','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(641,'happy135','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(642,'happy136','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(643,'happy137','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(644,'happy138','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(645,'happy139','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(646,'happy140','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(647,'happy141','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(648,'happy142','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(649,'happy143','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(650,'happy144','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(651,'happy145','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(652,'happy146','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(653,'happy147','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(654,'happy148','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(655,'happy149','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(656,'happy150','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(657,'happy151','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(658,'happy152','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(659,'happy153','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(660,'happy154','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(661,'happy155','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(662,'happy156','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(663,'happy157','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(664,'happy158','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(665,'happy159','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(666,'happy160','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(667,'happy161','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(668,'happy162','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(669,'happy163','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(670,'happy164','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(671,'happy165','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(672,'happy166','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(673,'happy167','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(674,'happy168','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(675,'happy169','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(676,'happy170','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(677,'happy171','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(678,'happy172','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(679,'happy173','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(680,'happy174','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(681,'happy175','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(682,'happy176','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(683,'happy177','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(684,'happy178','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(685,'happy179','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(686,'happy180','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(687,'happy181','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(688,'happy182','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(689,'happy183','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(690,'happy184','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(691,'happy185','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(692,'happy186','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(693,'happy187','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(694,'happy188','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(695,'happy189','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(696,'happy190','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(697,'happy191','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(698,'happy192','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(699,'happy193','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(700,'happy194','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(701,'happy195','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(702,'happy196','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(703,'happy197','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(704,'happy198','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(705,'happy199','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(706,'happy200','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(707,'happy201','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(708,'happy202','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(709,'happy203','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(710,'happy204','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(711,'happy205','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(712,'happy206','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(713,'happy207','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(714,'happy208','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(715,'happy209','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(716,'happy210','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(717,'happy211','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(718,'happy212','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(719,'happy213','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(720,'happy214','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(721,'happy215','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(722,'happy216','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(723,'happy217','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(724,'happy218','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(725,'happy219','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(726,'happy220','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(727,'happy221','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(728,'happy222','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(729,'happy223','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(730,'happy224','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(731,'happy225','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(732,'happy226','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(733,'happy227','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(734,'happy228','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(735,'happy229','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(736,'happy230','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(737,'happy231','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(738,'happy232','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(739,'happy233','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(740,'happy234','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(741,'happy235','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(742,'happy236','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(743,'happy237','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(744,'happy238','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(745,'happy239','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(746,'happy240','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(747,'happy241','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(748,'happy242','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(749,'happy243','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(750,'happy244','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(751,'happy245','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(752,'happy246','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(753,'happy247','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(754,'happy248','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(755,'happy249','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(756,'happy250','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(757,'happy251','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(758,'happy252','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(759,'happy253','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(760,'happy254','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(761,'happy255','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(762,'happy256','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(763,'happy257','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(764,'happy258','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(765,'happy259','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(766,'happy260','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(767,'happy261','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(768,'happy262','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(769,'happy263','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(770,'happy264','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(771,'happy265','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(772,'happy266','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(773,'happy267','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(774,'happy268','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(775,'happy269','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(776,'happy270','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(777,'happy271','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(778,'happy272','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(779,'happy273','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(780,'happy274','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(781,'happy275','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(782,'happy276','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(783,'happy277','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(784,'happy278','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(785,'happy279','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(786,'happy280','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(787,'happy281','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(788,'happy282','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(789,'happy283','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(790,'happy284','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(791,'happy285','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(792,'happy286','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(793,'happy287','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(794,'happy288','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(795,'happy289','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(796,'happy290','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(797,'happy291','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(798,'happy292','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(799,'happy293','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(800,'happy294','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(801,'happy295','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(802,'happy296','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(803,'happy297','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(804,'happy298','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(805,'happy299','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(806,'happy300','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(807,'happy301','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(808,'happy302','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(809,'happy303','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(810,'happy304','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(811,'happy305','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(812,'happy306','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(813,'happy307','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(814,'happy308','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(815,'happy309','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(816,'happy310','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(817,'happy311','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(818,'happy312','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(819,'happy313','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(820,'happy314','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(821,'happy315','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(822,'happy316','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(823,'happy317','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(824,'happy318','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(825,'happy319','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(826,'happy320','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(827,'happy321','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(828,'happy322','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(829,'happy323','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(830,'happy324','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(831,'happy325','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(832,'happy326','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(833,'happy327','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(834,'happy328','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(835,'happy329','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(836,'happy330','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(837,'happy331','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(838,'happy332','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(839,'happy333','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(840,'happy334','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(841,'happy335','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(842,'happy336','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(843,'happy337','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(844,'happy338','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(845,'happy339','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(846,'happy340','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(847,'happy341','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(848,'happy342','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(849,'happy343','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(850,'happy344','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(851,'happy345','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(852,'happy346','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(853,'happy347','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(854,'happy348','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(855,'happy349','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(856,'happy350','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(857,'happy351','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(858,'happy352','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(859,'happy353','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(860,'happy354','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(861,'happy355','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(862,'happy356','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(863,'happy357','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(864,'happy358','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(865,'happy359','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(866,'happy360','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(867,'happy361','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(868,'happy362','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(869,'happy363','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(870,'happy364','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(871,'happy365','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(872,'happy366','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(873,'happy367','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(874,'happy368','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(875,'happy369','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(876,'happy370','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(877,'happy371','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(878,'happy372','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(879,'happy373','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(880,'happy374','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(881,'happy375','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(882,'happy376','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(883,'happy377','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(884,'happy378','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(885,'happy379','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(886,'happy380','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(887,'happy381','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(888,'happy382','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(889,'happy383','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(890,'happy384','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(891,'happy385','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(892,'happy386','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(893,'happy387','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(894,'happy388','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(895,'happy389','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(896,'happy390','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(897,'happy391','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(898,'happy392','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(899,'happy393','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(900,'happy394','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(901,'happy395','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(902,'happy396','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(903,'happy397','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(904,'happy398','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(905,'happy399','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(906,'happy400','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(907,'happy401','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(908,'happy402','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(909,'happy403','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(910,'happy404','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(911,'happy405','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(912,'happy406','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(913,'happy407','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(914,'happy408','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(915,'happy409','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(916,'happy410','54321','2015-03-23',54,'2015-03-23 00:00:00',0),(917,'happy411','54321','2015-03-23',55,'2015-03-23 00:00:00',0),(918,'happy412','54321','2015-03-23',56,'2015-03-23 00:00:00',0),(919,'happy413','54321','2015-03-23',57,'2015-03-23 00:00:00',0),(920,'happy414','54321','2015-03-23',58,'2015-03-23 00:00:00',0),(921,'happy415','54321','2015-03-23',59,'2015-03-23 00:00:00',0),(922,'happy416','54321','2015-03-23',60,'2015-03-23 00:00:00',0),(923,'happy417','54321','2015-03-23',61,'2015-03-23 00:00:00',0),(924,'happy418','54321','2015-03-23',62,'2015-03-23 00:00:00',0),(925,'happy419','54321','2015-03-23',63,'2015-03-23 00:00:00',0),(926,'happy420','54321','2015-03-23',64,'2015-03-23 00:00:00',0),(927,'happy421','54321','2015-03-23',65,'2015-03-23 00:00:00',0),(928,'happy422','54321','2015-03-23',66,'2015-03-23 00:00:00',0),(929,'happy423','54321','2015-03-23',67,'2015-03-23 00:00:00',0),(930,'happy424','54321','2015-03-23',68,'2015-03-23 00:00:00',0),(931,'happy425','54321','2015-03-23',69,'2015-03-23 00:00:00',0),(932,'happy426','54321','2015-03-23',70,'2015-03-23 00:00:00',0),(933,'happy427','54321','2015-03-23',71,'2015-03-23 00:00:00',0),(934,'happy428','54321','2015-03-23',72,'2015-03-23 00:00:00',0),(935,'happy429','54321','2015-03-23',73,'2015-03-23 00:00:00',0),(936,'happy430','54321','2015-03-23',74,'2015-03-23 00:00:00',0),(937,'happy431','54321','2015-03-23',75,'2015-03-23 00:00:00',0),(938,'happy432','54321','2015-03-23',76,'2015-03-23 00:00:00',0),(939,'happy433','54321','2015-03-23',77,'2015-03-23 00:00:00',0),(940,'happy434','54321','2015-03-23',78,'2015-03-23 00:00:00',0),(941,'happy435','54321','2015-03-23',79,'2015-03-23 00:00:00',0),(942,'happy436','54321','2015-03-23',80,'2015-03-23 00:00:00',0),(943,'happy437','54321','2015-03-23',81,'2015-03-23 00:00:00',0),(944,'happy438','54321','2015-03-23',82,'2015-03-23 00:00:00',0),(945,'happy439','54321','2015-03-23',83,'2015-03-23 00:00:00',0),(946,'happy440','54321','2015-03-23',84,'2015-03-23 00:00:00',0),(947,'happy441','54321','2015-03-23',85,'2015-03-23 00:00:00',0),(948,'happy442','54321','2015-03-23',86,'2015-03-23 00:00:00',0),(949,'happy443','54321','2015-03-23',87,'2015-03-23 00:00:00',0),(950,'happy444','54321','2015-03-23',88,'2015-03-23 00:00:00',0),(951,'happy445','54321','2015-03-23',0,'2015-03-23 00:00:00',0),(952,'happy446','54321','2015-03-23',1,'2015-03-23 00:00:00',0),(953,'happy447','54321','2015-03-23',2,'2015-03-23 00:00:00',0),(954,'happy448','54321','2015-03-23',3,'2015-03-23 00:00:00',0),(955,'happy449','54321','2015-03-23',4,'2015-03-23 00:00:00',0),(956,'happy450','54321','2015-03-23',5,'2015-03-23 00:00:00',0),(957,'happy451','54321','2015-03-23',6,'2015-03-23 00:00:00',0),(958,'happy452','54321','2015-03-23',7,'2015-03-23 00:00:00',0),(959,'happy453','54321','2015-03-23',8,'2015-03-23 00:00:00',0),(960,'happy454','54321','2015-03-23',9,'2015-03-23 00:00:00',0),(961,'happy455','54321','2015-03-23',10,'2015-03-23 00:00:00',0),(962,'happy456','54321','2015-03-23',11,'2015-03-23 00:00:00',0),(963,'happy457','54321','2015-03-23',12,'2015-03-23 00:00:00',0),(964,'happy458','54321','2015-03-23',13,'2015-03-23 00:00:00',0),(965,'happy459','54321','2015-03-23',14,'2015-03-23 00:00:00',0),(966,'happy460','54321','2015-03-23',15,'2015-03-23 00:00:00',0),(967,'happy461','54321','2015-03-23',16,'2015-03-23 00:00:00',0),(968,'happy462','54321','2015-03-23',17,'2015-03-23 00:00:00',0),(969,'happy463','54321','2015-03-23',18,'2015-03-23 00:00:00',0),(970,'happy464','54321','2015-03-23',19,'2015-03-23 00:00:00',0),(971,'happy465','54321','2015-03-23',20,'2015-03-23 00:00:00',0),(972,'happy466','54321','2015-03-23',21,'2015-03-23 00:00:00',0),(973,'happy467','54321','2015-03-23',22,'2015-03-23 00:00:00',0),(974,'happy468','54321','2015-03-23',23,'2015-03-23 00:00:00',0),(975,'happy469','54321','2015-03-23',24,'2015-03-23 00:00:00',0),(976,'happy470','54321','2015-03-23',25,'2015-03-23 00:00:00',0),(977,'happy471','54321','2015-03-23',26,'2015-03-23 00:00:00',0),(978,'happy472','54321','2015-03-23',27,'2015-03-23 00:00:00',0),(979,'happy473','54321','2015-03-23',28,'2015-03-23 00:00:00',0),(980,'happy474','54321','2015-03-23',29,'2015-03-23 00:00:00',0),(981,'happy475','54321','2015-03-23',30,'2015-03-23 00:00:00',0),(982,'happy476','54321','2015-03-23',31,'2015-03-23 00:00:00',0),(983,'happy477','54321','2015-03-23',32,'2015-03-23 00:00:00',0),(984,'happy478','54321','2015-03-23',33,'2015-03-23 00:00:00',0),(985,'happy479','54321','2015-03-23',34,'2015-03-23 00:00:00',0),(986,'happy480','54321','2015-03-23',35,'2015-03-23 00:00:00',0),(987,'happy481','54321','2015-03-23',36,'2015-03-23 00:00:00',0),(988,'happy482','54321','2015-03-23',37,'2015-03-23 00:00:00',0),(989,'happy483','54321','2015-03-23',38,'2015-03-23 00:00:00',0),(990,'happy484','54321','2015-03-23',39,'2015-03-23 00:00:00',0),(991,'happy485','54321','2015-03-23',40,'2015-03-23 00:00:00',0),(992,'happy486','54321','2015-03-23',41,'2015-03-23 00:00:00',0),(993,'happy487','54321','2015-03-23',42,'2015-03-23 00:00:00',0),(994,'happy488','54321','2015-03-23',43,'2015-03-23 00:00:00',0),(995,'happy489','54321','2015-03-23',44,'2015-03-23 00:00:00',0),(996,'happy490','54321','2015-03-23',45,'2015-03-23 00:00:00',0),(997,'happy491','54321','2015-03-23',46,'2015-03-23 00:00:00',0),(998,'happy492','54321','2015-03-23',47,'2015-03-23 00:00:00',0),(999,'happy493','54321','2015-03-23',48,'2015-03-23 00:00:00',0),(1000,'happy494','54321','2015-03-23',49,'2015-03-23 00:00:00',0),(1001,'happy495','54321','2015-03-23',50,'2015-03-23 00:00:00',0),(1002,'happy496','54321','2015-03-23',51,'2015-03-23 00:00:00',0),(1003,'happy497','54321','2015-03-23',52,'2015-03-23 00:00:00',0),(1004,'happy498','54321','2015-03-23',53,'2015-03-23 00:00:00',0),(1005,'happy499','54321','2015-03-23',54,'2015-03-23 00:00:00',0);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `websites`
--

DROP TABLE IF EXISTS `websites`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `websites` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` char(20) NOT NULL DEFAULT '' COMMENT '站点名称',
  `url` varchar(255) NOT NULL DEFAULT '',
  `alexa` int(11) NOT NULL DEFAULT '0' COMMENT 'Alexa 排名',
  `country` char(10) NOT NULL DEFAULT '' COMMENT '国家',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `websites`
--

LOCK TABLES `websites` WRITE;
/*!40000 ALTER TABLE `websites` DISABLE KEYS */;
INSERT INTO `websites` VALUES (1,'Google','https://www.google.cm/',1,'USA'),(2,'淘宝','https://www.taobao.com/',13,'CN'),(3,'菜鸟教程','http://www.runoob.com/',4689,'CN'),(4,'微博','http://weibo.com/',20,'CN'),(5,'Facebook','https://www.facebook.com/',3,'USA');
/*!40000 ALTER TABLE `websites` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-26 17:23:52
